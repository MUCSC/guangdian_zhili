###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        10/Jul/2016  20:24:42
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\app\oled.c
#    Command line =  
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\app\oled.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\RAM\List\
#        -lB
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\RAM\List\
#        -o
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\RAM\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        E:\IAR\anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\app\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\CPU\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\common\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\LPLD\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\LPLD\HW\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\FatFs\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\FatFs\option\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\USB\common\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\USB\driver\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\USB\descriptor\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\USB\class\
#        -Ol -I E:\IAR\anzhuang\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\RAM\List\oled.lst
#    Object file  =  
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\RAM\Obj\oled.o
#
###############################################################################

F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\app\oled.c
      1          #include "common.h"
      2          //OLED显示屏
      3          
      4          
      5          #define OLED_RST(x)  LPLD_GPIO_Output_b(PTA, 16, x)
      6          #define OLED_DC(x)   LPLD_GPIO_Output_b(PTA, 17, x)
      7          #define OLED_D0(x)   LPLD_GPIO_Output_b(PTA, 24, x)
      8          #define OLED_D1(x)   LPLD_GPIO_Output_b(PTA, 25, x)
      9          
     10          
     11          
     12          

   \                                 In section .bss, align 1
     13          uint8  reverse=0;
   \                     reverse:
   \   00000000                      DS8 1
     14          /*定义ASCII码表*/

   \                                 In section .rodata, align 4
     15          const unsigned char F6x8[][6] =
   \                     F6x8:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x2F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x07 0x00    
   \              0x07 0x00    
   \              0x00 0x14    
   \              0x7F         
   \   00000015   0x14 0x7F          DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
   \              0x14 0x00    
   \              0x24 0x2A    
   \              0x7F 0x2A    
   \              0x12 0x00    
   \              0x62 0x64    
   \              0x08 0x13    
   \              0x23 0x00    
   \              0x36         
   \   00000026   0x49 0x55          DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
   \              0x22 0x50    
   \              0x00 0x00    
   \              0x05 0x03    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1C 0x22    
   \              0x41 0x00    
   \              0x00 0x00    
   \              0x41 0x22    
   \   0000003A   0x1C 0x00          DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
   \              0x00 0x14    
   \              0x08 0x3E    
   \              0x08 0x14    
   \              0x00 0x08    
   \              0x08 0x3E    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x00 0xA0    
   \              0x60 0x00    
   \   0000004E   0x00 0x08          DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x60 0x60    
   \              0x00 0x00    
   \              0x00 0x20    
   \              0x10 0x08    
   \              0x04 0x02    
   \              0x00 0x3E    
   \              0x51         
   \   00000063   0x49 0x45          DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
   \              0x3E 0x00    
   \              0x00 0x42    
   \              0x7F 0x40    
   \              0x00 0x00    
   \              0x42 0x61    
   \              0x51 0x49    
   \              0x46 0x00    
   \              0x21 0x41    
   \   00000075   0x45 0x4B          DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
   \              0x31 0x00    
   \              0x18 0x14    
   \              0x12 0x7F    
   \              0x10 0x00    
   \              0x27 0x45    
   \              0x45 0x45    
   \              0x39 0x00    
   \              0x3C         
   \   00000086   0x4A 0x49          DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
   \              0x49 0x30    
   \              0x00 0x01    
   \              0x71 0x09    
   \              0x05 0x03    
   \              0x00 0x36    
   \              0x49 0x49    
   \              0x49 0x36    
   \              0x00 0x06    
   \              0x49         
   \   00000099   0x49 0x29          DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
   \              0x1E 0x00    
   \              0x00 0x36    
   \              0x36 0x00    
   \              0x00 0x00    
   \              0x00 0x56    
   \              0x36 0x00    
   \              0x00 0x00    
   \              0x08 0x14    
   \              0x22         
   \   000000AC   0x41 0x00          DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
   \              0x00 0x14    
   \              0x14 0x14    
   \              0x14 0x14    
   \              0x00 0x00    
   \              0x41 0x22    
   \              0x14 0x08    
   \              0x00 0x02    
   \              0x01 0x51    
   \              0x09         
   \   000000BF   0x06 0x00          DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
   \              0x32 0x49    
   \              0x59 0x51    
   \              0x3E 0x00    
   \              0x7C 0x12    
   \              0x11 0x12    
   \              0x7C 0x00    
   \              0x7F 0x49    
   \              0x49         
   \   000000D0   0x49 0x36          DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
   \              0x00 0x3E    
   \              0x41 0x41    
   \              0x41 0x22    
   \              0x00 0x7F    
   \              0x41 0x41    
   \              0x22 0x1C    
   \              0x00 0x7F    
   \              0x49         
   \   000000E1   0x49 0x49          DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
   \              0x41 0x00    
   \              0x7F 0x09    
   \              0x09 0x09    
   \              0x01 0x00    
   \              0x3E 0x41    
   \              0x49 0x49    
   \              0x7A 0x00    
   \              0x7F 0x08    
   \   000000F3   0x08 0x08          DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
   \              0x7F 0x00    
   \              0x00 0x41    
   \              0x7F 0x41    
   \              0x00 0x00    
   \              0x20 0x40    
   \              0x41 0x3F    
   \              0x01 0x00    
   \              0x7F 0x08    
   \   00000105   0x14 0x22          DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
   \              0x41 0x00    
   \              0x7F 0x40    
   \              0x40 0x40    
   \              0x40 0x00    
   \              0x7F 0x02    
   \              0x0C 0x02    
   \              0x7F 0x00    
   \              0x7F         
   \   00000116   0x04 0x08          DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
   \              0x10 0x7F    
   \              0x00 0x3E    
   \              0x41 0x41    
   \              0x41 0x3E    
   \              0x00 0x7F    
   \              0x09 0x09    
   \              0x09 0x06    
   \              0x00 0x3E    
   \              0x41         
   \   00000129   0x51 0x21          DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
   \              0x5E 0x00    
   \              0x7F 0x09    
   \              0x19 0x29    
   \              0x46 0x00    
   \              0x46 0x49    
   \              0x49 0x49    
   \              0x31 0x00    
   \              0x01 0x01    
   \   0000013B   0x7F 0x01          DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
   \              0x01 0x00    
   \              0x3F 0x40    
   \              0x40 0x40    
   \              0x3F 0x00    
   \              0x1F 0x20    
   \              0x40 0x20    
   \              0x1F 0x00    
   \              0x3F 0x40    
   \   0000014D   0x38 0x40          DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
   \              0x3F 0x00    
   \              0x63 0x14    
   \              0x08 0x14    
   \              0x63 0x00    
   \              0x07 0x08    
   \              0x70 0x08    
   \              0x07 0x00    
   \              0x61 0x51    
   \              0x49         
   \   00000160   0x45 0x43          DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 2, 4, 8, 16, 32, 0, 0, 65, 65, 127
   \              0x00 0x00    
   \              0x7F 0x41    
   \              0x41 0x00    
   \              0x00 0x02    
   \              0x04 0x08    
   \              0x10 0x20    
   \              0x00 0x00    
   \              0x41 0x41    
   \              0x7F         
   \   00000173   0x00 0x00          DC8 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0, 0, 32
   \              0x04 0x02    
   \              0x01 0x02    
   \              0x04 0x00    
   \              0x40 0x40    
   \              0x40 0x40    
   \              0x40 0x00    
   \              0x00 0x01    
   \              0x02 0x04    
   \              0x00 0x00    
   \              0x20         
   \   00000188   0x54 0x54          DC8 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68, 32, 0
   \              0x54 0x78    
   \              0x00 0x7F    
   \              0x48 0x44    
   \              0x44 0x38    
   \              0x00 0x38    
   \              0x44 0x44    
   \              0x44 0x20    
   \              0x00         
   \   00000199   0x38 0x44          DC8 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1, 2, 0
   \              0x44 0x48    
   \              0x7F 0x00    
   \              0x38 0x54    
   \              0x54 0x54    
   \              0x18 0x00    
   \              0x08 0x7E    
   \              0x09 0x01    
   \              0x02 0x00    
   \   000001AB   0x18 0xA4          DC8 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125, 64, 0
   \              0xA4 0xA4    
   \              0x7C 0x00    
   \              0x7F 0x08    
   \              0x04 0x04    
   \              0x78 0x00    
   \              0x00 0x44    
   \              0x7D 0x40    
   \              0x00         
   \   000001BC   0x00 0x40          DC8 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65, 127, 64
   \              0x80 0x84    
   \              0x7D 0x00    
   \              0x00 0x7F    
   \              0x10 0x28    
   \              0x44 0x00    
   \              0x00 0x00    
   \              0x41 0x7F    
   \              0x40         
   \   000001CD   0x00 0x00          DC8 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68, 68, 68
   \              0x7C 0x04    
   \              0x18 0x04    
   \              0x78 0x00    
   \              0x7C 0x08    
   \              0x04 0x04    
   \              0x78 0x00    
   \              0x38 0x44    
   \              0x44 0x44    
   \   000001DF   0x38 0x00          DC8 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124, 8, 4, 4
   \              0xFC 0x24    
   \              0x24 0x24    
   \              0x18 0x00    
   \              0x18 0x24    
   \              0x24 0x18    
   \              0xFC 0x00    
   \              0x7C 0x08    
   \              0x04 0x04    
   \   000001F1   0x08 0x00          DC8 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64, 64, 32
   \              0x48 0x54    
   \              0x54 0x54    
   \              0x20 0x00    
   \              0x04 0x3F    
   \              0x44 0x40    
   \              0x20 0x00    
   \              0x3C 0x40    
   \              0x40 0x20    
   \   00000203   0x7C 0x00          DC8 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68, 40, 16
   \              0x1C 0x20    
   \              0x40 0x20    
   \              0x1C 0x00    
   \              0x3C 0x40    
   \              0x30 0x40    
   \              0x3C 0x00    
   \              0x44 0x28    
   \              0x10         
   \   00000214   0x28 0x44          DC8 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68, 20, 20
   \              0x00 0x1C    
   \              0xA0 0xA0    
   \              0xA0 0x7C    
   \              0x00 0x44    
   \              0x64 0x54    
   \              0x4C 0x44    
   \              0x14 0x14    
   \   00000224   0x14 0x14          DC8 20, 20, 20, 20
   \              0x14 0x14    
     16          {
     17          	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
     18          	{ 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
     19          	{ 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
     20          	{ 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
     21          	{ 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
     22          	{ 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
     23          	{ 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
     24          	{ 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
     25          	{ 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
     26          	{ 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
     27          	{ 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
     28          	{ 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
     29          	{ 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
     30          	{ 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
     31          	{ 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
     32          	{ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
     33          	{ 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
     34          	{ 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
     35          	{ 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
     36          	{ 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
     37          	{ 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
     38          	{ 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
     39          	{ 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
     40          	{ 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
     41          	{ 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
     42          	{ 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
     43          	{ 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
     44          	{ 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
     45          	{ 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
     46          	{ 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
     47          	{ 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
     48          	{ 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
     49          	{ 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
     50          	{ 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
     51          	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
     52          	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
     53          	{ 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
     54          	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
     55          	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
     56          	{ 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
     57          	{ 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
     58          	{ 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
     59          	{ 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
     60          	{ 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
     61          	{ 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
     62          	{ 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
     63          	{ 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
     64          	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
     65          	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
     66          	{ 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
     67          	{ 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
     68          	{ 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
     69          	{ 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
     70          	{ 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
     71          	{ 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
     72          	{ 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
     73          	{ 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
     74          	{ 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
     75          	{ 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
     76          	{ 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [ 91
     77          	{ 0x00, 0x02, 0x04 ,0x08, 0x10, 0x20 },    // \92
     78          	{ 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
     79          	{ 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
     80          	{ 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
     81          	{ 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
     82          	{ 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
     83          	{ 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
     84          	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
     85          	{ 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
     86          	{ 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
     87          	{ 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
     88          	{ 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
     89          	{ 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
     90          	{ 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
     91          	{ 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
     92          	{ 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
     93          	{ 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
     94          	{ 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
     95          	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
     96          	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
     97          	{ 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
     98          	{ 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
     99          	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
    100          	{ 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
    101          	{ 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
    102          	{ 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
    103          	{ 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
    104          	{ 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
    105          	{ 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
    106          	{ 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
    107          	{ 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
    108          	{ 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
    109          };
    110          
    111          //写数据函数

   \                                 In section .text, align 4, keep-with-next
    112          void OLED_WrDat(unsigned char data,unsigned char revs)   
    113          {
   \                     OLED_WrDat: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    114          	unsigned char i = 8;
   \   00000006   0x2608             MOVS     R6,#+8
    115                  OLED_DC(1); 
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0x2111             MOVS     R1,#+17
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   00000010   0x.... 0x....      BL       LPLD_GPIO_Output_b
    116          	OLED_D0(0); 
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x2118             MOVS     R1,#+24
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   0000001C   0x.... 0x....      BL       LPLD_GPIO_Output_b
    117                  if(revs) data=~data;
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2D00             CMP      R5,#+0
   \   00000024   0xD016             BEQ.N    ??OLED_WrDat_0
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x43E4             MVNS     R4,R4
   \   0000002A   0xE013             B.N      ??OLED_WrDat_0
    118          	while (i--)
    119          	{
    120                      if (data & 0x80)
    121                      {
    122                       OLED_D1(1);
    123                      }
    124                      else
    125                      {
    126                       OLED_D1(0);
   \                     ??OLED_WrDat_1: (+1)
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0x2119             MOVS     R1,#+25
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   00000034   0x.... 0x....      BL       LPLD_GPIO_Output_b
    127                      }
    128                       OLED_D0(1);
   \                     ??OLED_WrDat_2: (+1)
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x2118             MOVS     R1,#+24
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   00000040   0x.... 0x....      BL       LPLD_GPIO_Output_b
    129                      asm("nop");
   \   00000044   0xBF00             nop
    130                       OLED_D0(0);
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0x2118             MOVS     R1,#+24
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   0000004E   0x.... 0x....      BL       LPLD_GPIO_Output_b
    131                      data <<= 1;    
   \   00000052   0x0064             LSLS     R4,R4,#+1
   \                     ??OLED_WrDat_0: (+1)
   \   00000054   0x0030             MOVS     R0,R6
   \   00000056   0x1E46             SUBS     R6,R0,#+1
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD008             BEQ.N    ??OLED_WrDat_3
   \   0000005E   0x0620             LSLS     R0,R4,#+24
   \   00000060   0xD5E4             BPL.N    ??OLED_WrDat_1
   \   00000062   0x2201             MOVS     R2,#+1
   \   00000064   0x2119             MOVS     R1,#+25
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   0000006A   0x.... 0x....      BL       LPLD_GPIO_Output_b
   \   0000006E   0xE7E3             B.N      ??OLED_WrDat_2
    132          	}
    133          }
   \                     ??OLED_WrDat_3: (+1)
   \   00000070   0xBD70             POP      {R4-R6,PC}       ;; return
    134          //写入命令函数

   \                                 In section .text, align 4, keep-with-next
    135          void OLED_WrCmd(unsigned char cmd) 
    136          {
   \                     OLED_WrCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    137          	unsigned char i = 8;
   \   00000004   0x2508             MOVS     R5,#+8
    138          	//LED_CS = 0;
    139                  OLED_DC(0); 
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x2111             MOVS     R1,#+17
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   0000000E   0x.... 0x....      BL       LPLD_GPIO_Output_b
    140          	OLED_D0(0);
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x2118             MOVS     R1,#+24
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   0000001A   0x.... 0x....      BL       LPLD_GPIO_Output_b
   \   0000001E   0xE013             B.N      ??OLED_WrCmd_0
    141          	while (i--)
    142          	{
    143          		if (cmd & 0x80)
    144          		{
    145          			OLED_D1(1);
    146          		}
    147          		else
    148          		{
    149          			OLED_D1(0);
   \                     ??OLED_WrCmd_1: (+1)
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x2119             MOVS     R1,#+25
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   00000028   0x.... 0x....      BL       LPLD_GPIO_Output_b
    150          		}
    151          		OLED_D0(1);
   \                     ??OLED_WrCmd_2: (+1)
   \   0000002C   0x2201             MOVS     R2,#+1
   \   0000002E   0x2118             MOVS     R1,#+24
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   00000034   0x.... 0x....      BL       LPLD_GPIO_Output_b
    152                          asm("nop");
   \   00000038   0xBF00             nop
    153                          OLED_D0(0);
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0x2118             MOVS     R1,#+24
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   00000042   0x.... 0x....      BL       LPLD_GPIO_Output_b
    154          		cmd <<= 1;   
   \   00000046   0x0064             LSLS     R4,R4,#+1
   \                     ??OLED_WrCmd_0: (+1)
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x1E45             SUBS     R5,R0,#+1
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD008             BEQ.N    ??OLED_WrCmd_3
   \   00000052   0x0620             LSLS     R0,R4,#+24
   \   00000054   0xD5E4             BPL.N    ??OLED_WrCmd_1
   \   00000056   0x2201             MOVS     R2,#+1
   \   00000058   0x2119             MOVS     R1,#+25
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   0000005E   0x.... 0x....      BL       LPLD_GPIO_Output_b
   \   00000062   0xE7E3             B.N      ??OLED_WrCmd_2
    155          	} 	
    156          	//LED_CS = 1;
    157          }
   \                     ??OLED_WrCmd_3: (+1)
   \   00000064   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    158          //设置显示坐标位置

   \                                 In section .text, align 2, keep-with-next
    159          void OLED_Set_Pos(unsigned char x, unsigned char y)
    160          { 
   \                     OLED_Set_Pos: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    161          	OLED_WrCmd(0xb0+y);
   \   00000004   0xF1B1 0x0050      SUBS     R0,R1,#+80
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       OLED_WrCmd
    162          	OLED_WrCmd(((x&0xf0)>>4)|0x10);
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x0920             LSRS     R0,R4,#+4
   \   00000012   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       OLED_WrCmd
    163          	OLED_WrCmd((x&0x0f)|0x00); 
   \   0000001C   0xF014 0x000F      ANDS     R0,R4,#0xF
   \   00000020   0x.... 0x....      BL       OLED_WrCmd
    164          }
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    165          //OLED填充

   \                                 In section .text, align 2, keep-with-next
    166          void OLED_Fill(unsigned char bmp_data)
    167          {
   \                     OLED_Fill: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    168          	unsigned char y,x;
    169          	
    170          	for(y=0;y<8;y++)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE009             B.N      ??OLED_Fill_0
    171          	{
    172          		OLED_WrCmd(0xb0+y);   //0xb0+0~7表示页0~页7?
    173          		OLED_WrCmd(0x00);       //0x00+0~16表示将128列分成16组其地址在某组中的第几列
    174          		OLED_WrCmd(0x10);      //0x10+0~16表示将128列分成16组其地址所在第几组
    175          		for(x=0;x<128;x++)
    176          	        OLED_WrDat(bmp_data,0);
   \                     ??OLED_Fill_1: (+1)
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       OLED_WrDat
   \   00000012   0x1C76             ADDS     R6,R6,#+1
   \                     ??OLED_Fill_2: (+1)
   \   00000014   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000016   0x2E80             CMP      R6,#+128
   \   00000018   0xDBF6             BLT.N    ??OLED_Fill_1
   \   0000001A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??OLED_Fill_0: (+1)
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0x2D08             CMP      R5,#+8
   \   00000020   0xDA0C             BGE.N    ??OLED_Fill_3
   \   00000022   0xF1B5 0x0050      SUBS     R0,R5,#+80
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       OLED_WrCmd
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       OLED_WrCmd
   \   00000032   0x2010             MOVS     R0,#+16
   \   00000034   0x.... 0x....      BL       OLED_WrCmd
   \   00000038   0x2600             MOVS     R6,#+0
   \   0000003A   0xE7EB             B.N      ??OLED_Fill_2
    177          	}
    178          }
   \                     ??OLED_Fill_3: (+1)
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    179          //延时函数

   \                                 In section .text, align 2, keep-with-next
    180          void OLED_DLY_ms(unsigned int ms)
    181          {                         
   \                     OLED_DLY_ms: (+1)
   \   00000000   0xE007             B.N      ??OLED_DLY_ms_0
    182            uint16 a;
    183            while(ms)
    184            {
    185              a=6675;
   \                     ??OLED_DLY_ms_1: (+1)
   \   00000002   0xF641 0x2113      MOVW     R1,#+6675
    186              while(a--);
   \                     ??OLED_DLY_ms_2: (+1)
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0x1E51             SUBS     R1,R2,#+1
   \   0000000A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD1FA             BNE.N    ??OLED_DLY_ms_2
    187              ms--;
   \   00000010   0x1E40             SUBS     R0,R0,#+1
    188            }
   \                     ??OLED_DLY_ms_0: (+1)
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD1F5             BNE.N    ??OLED_DLY_ms_1
    189            return;
   \   00000016   0x4770             BX       LR               ;; return
    190          }

   \                                 In section .text, align 2, keep-with-next
    191          void SetStartColumn(unsigned char d)
    192          {
   \                     SetStartColumn: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    193          	OLED_WrCmd(0x00+d%16);	// Set Lower Column Start Address for Page Addressing Mode
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2110             MOVS     R1,#+16
   \   00000008   0xFB94 0xF0F1      SDIV     R0,R4,R1
   \   0000000C   0xFB00 0x4011      MLS      R0,R0,R1,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       OLED_WrCmd
    194          							// Default => 0x00
    195          	OLED_WrCmd(0x10+d/16);	// Set Higher Column Start Address for Page Addressing Mode
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2010             MOVS     R0,#+16
   \   0000001A   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   0000001E   0x3010             ADDS     R0,R0,#+16
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x.... 0x....      BL       OLED_WrCmd
    196          							// Default => 0x10
    197          }
   \   00000026   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    198          void SetAddressingMode(unsigned char d)
    199          {
   \                     SetAddressingMode: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    200          	OLED_WrCmd(0x20);			// Set Memory Addressing Mode
   \   00000004   0x2020             MOVS     R0,#+32
   \   00000006   0x.... 0x....      BL       OLED_WrCmd
    201          	OLED_WrCmd(d);			// Default => 0x02
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       OLED_WrCmd
    202          							// 0x00 => Horizontal Addressing Mode
    203          							// 0x01 => Vertical Addressing Mode
    204          							// 0x02 => Page Addressing Mode
    205          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    206          

   \                                 In section .text, align 2, keep-with-next
    207          void SetColumnAddress(unsigned char a, unsigned char b)
    208          {
   \                     SetColumnAddress: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    209          	OLED_WrCmd(0x21);			// Set Column Address
   \   00000006   0x2021             MOVS     R0,#+33
   \   00000008   0x.... 0x....      BL       OLED_WrCmd
    210          	OLED_WrCmd(a);			// Default => 0x00 (Column Start Address)
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       OLED_WrCmd
    211          	OLED_WrCmd(b);			// Default => 0x7F (Column End Address)
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       OLED_WrCmd
    212          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    213          

   \                                 In section .text, align 2, keep-with-next
    214          void SetPageAddress(unsigned char a, unsigned char b)
    215          {
   \                     SetPageAddress: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    216          	OLED_WrCmd(0x22);			// Set Page Address
   \   00000006   0x2022             MOVS     R0,#+34
   \   00000008   0x.... 0x....      BL       OLED_WrCmd
    217          	OLED_WrCmd(a);			// Default => 0x00 (Page Start Address)
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       OLED_WrCmd
    218          	OLED_WrCmd(b);			// Default => 0x07 (Page End Address)
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       OLED_WrCmd
    219          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    220          

   \                                 In section .text, align 2, keep-with-next
    221          void SetStartLine(unsigned char d)
    222          {
   \                     SetStartLine: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    223          	OLED_WrCmd(0x40|d);		// Set Display Start Line
   \   00000002   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       OLED_WrCmd
    224          							// Default => 0x40 (0x00)
    225          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    226          

   \                                 In section .text, align 2, keep-with-next
    227          void SetContrastControl(unsigned char d)
    228          {
   \                     SetContrastControl: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    229          	OLED_WrCmd(0x81);			// Set Contrast Control
   \   00000004   0x2081             MOVS     R0,#+129
   \   00000006   0x.... 0x....      BL       OLED_WrCmd
    230          	OLED_WrCmd(d);			// Default => 0x7F
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       OLED_WrCmd
    231          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    232          

   \                                 In section .text, align 2, keep-with-next
    233          void Set_Charge_Pump(unsigned char d)
    234          {
   \                     Set_Charge_Pump: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    235          	OLED_WrCmd(0x8D);			// Set Charge Pump
   \   00000004   0x208D             MOVS     R0,#+141
   \   00000006   0x.... 0x....      BL       OLED_WrCmd
    236          	OLED_WrCmd(0x10|d);		// Default => 0x10
   \   0000000A   0xF054 0x0010      ORRS     R0,R4,#0x10
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       OLED_WrCmd
    237          							// 0x10 (0x00) => Disable Charge Pump
    238          							// 0x14 (0x04) => Enable Charge Pump
    239          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    240          

   \                                 In section .text, align 2, keep-with-next
    241          void Set_Segment_Remap(unsigned char d)
    242          {
   \                     Set_Segment_Remap: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    243          	OLED_WrCmd(0xA0|d);		// Set Segment Re-Map
   \   00000002   0xF050 0x00A0      ORRS     R0,R0,#0xA0
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       OLED_WrCmd
    244          							// Default => 0xA0
    245          							// 0xA0 (0x00) => Column Address 0 Mapped to SEG0
    246          							// 0xA1 (0x01) => Column Address 0 Mapped to SEG127
    247          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    248          

   \                                 In section .text, align 2, keep-with-next
    249          void Set_Entire_Display(unsigned char d)
    250          {
   \                     Set_Entire_Display: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    251          	OLED_WrCmd(0xA4|d);		// Set Entire Display On / Off
   \   00000002   0xF050 0x00A4      ORRS     R0,R0,#0xA4
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       OLED_WrCmd
    252          							// Default => 0xA4
    253          							// 0xA4 (0x00) => Normal Display
    254          							// 0xA5 (0x01) => Entire Display On
    255          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    256          

   \                                 In section .text, align 2, keep-with-next
    257          void Set_Inverse_Display(unsigned char d)
    258          {
   \                     Set_Inverse_Display: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    259          	OLED_WrCmd(0xA6|d);		// Set Inverse Display On/Off
   \   00000002   0xF050 0x00A6      ORRS     R0,R0,#0xA6
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       OLED_WrCmd
    260          							// Default => 0xA6
    261          							// 0xA6 (0x00) => Normal Display
    262          							// 0xA7 (0x01) => Inverse Display On
    263          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    264          

   \                                 In section .text, align 2, keep-with-next
    265          void Set_Multiplex_Ratio(unsigned char d)
    266          {
   \                     Set_Multiplex_Ratio: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    267          	OLED_WrCmd(0xA8);			// Set Multiplex Ratio
   \   00000004   0x20A8             MOVS     R0,#+168
   \   00000006   0x.... 0x....      BL       OLED_WrCmd
    268          	OLED_WrCmd(d);			// Default => 0x3F (1/64 Duty)
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       OLED_WrCmd
    269          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    270          

   \                                 In section .text, align 2, keep-with-next
    271          void Set_Display_On_Off(unsigned char d)
    272          {
   \                     Set_Display_On_Off: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    273          	OLED_WrCmd(0xAE|d);		// Set Display On/Off
   \   00000002   0xF050 0x00AE      ORRS     R0,R0,#0xAE
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       OLED_WrCmd
    274          							// Default => 0xAE
    275          							// 0xAE (0x00) => Display Off
    276          							// 0xAF (0x01) => Display On
    277          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    278          

   \                                 In section .text, align 2, keep-with-next
    279          void SetStartPage(unsigned char d)
    280          {
   \                     SetStartPage: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    281          	OLED_WrCmd(0xB0|d);		// Set Page Start Address for Page Addressing Mode
   \   00000002   0xF050 0x00B0      ORRS     R0,R0,#0xB0
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       OLED_WrCmd
    282          							// Default => 0xB0 (0x00)
    283          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    284          

   \                                 In section .text, align 2, keep-with-next
    285          void Set_Common_Remap(unsigned char d)
    286          {
   \                     Set_Common_Remap: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    287          	OLED_WrCmd(0xC0|d);		// Set COM Output Scan Direction
   \   00000002   0xF050 0x00C0      ORRS     R0,R0,#0xC0
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       OLED_WrCmd
    288          							// Default => 0xC0
    289          							// 0xC0 (0x00) => Scan from COM0 to 63
    290          							// 0xC8 (0x08) => Scan from COM63 to 0
    291          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    292          

   \                                 In section .text, align 2, keep-with-next
    293          void Set_Display_Offset(unsigned char d)
    294          {
   \                     Set_Display_Offset: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    295          	OLED_WrCmd(0xD3);			// Set Display Offset
   \   00000004   0x20D3             MOVS     R0,#+211
   \   00000006   0x.... 0x....      BL       OLED_WrCmd
    296          	OLED_WrCmd(d);			// Default => 0x00
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       OLED_WrCmd
    297          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    298          

   \                                 In section .text, align 2, keep-with-next
    299          void Set_Display_Clock(unsigned char d)
    300          {
   \                     Set_Display_Clock: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    301          	OLED_WrCmd(0xD5);			// Set Display Clock Divide Ratio / Oscillator Frequency
   \   00000004   0x20D5             MOVS     R0,#+213
   \   00000006   0x.... 0x....      BL       OLED_WrCmd
    302          	OLED_WrCmd(d);			// Default => 0x80
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       OLED_WrCmd
    303          							// D[3:0] => Display Clock Divider
    304          							// D[7:4] => Oscillator Frequency
    305          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    306          

   \                                 In section .text, align 2, keep-with-next
    307          void Set_Precharge_Period(unsigned char d)
    308          {
   \                     Set_Precharge_Period: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    309          	OLED_WrCmd(0xD9);			// Set Pre-Charge Period
   \   00000004   0x20D9             MOVS     R0,#+217
   \   00000006   0x.... 0x....      BL       OLED_WrCmd
    310          	OLED_WrCmd(d);			// Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       OLED_WrCmd
    311          							// D[3:0] => Phase 1 Period in 1~15 Display Clocks
    312          							// D[7:4] => Phase 2 Period in 1~15 Display Clocks
    313          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    314          

   \                                 In section .text, align 2, keep-with-next
    315          void Set_Common_Config(unsigned char d)
    316          {
   \                     Set_Common_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    317          	OLED_WrCmd(0xDA);			// Set COM Pins Hardware Configuration
   \   00000004   0x20DA             MOVS     R0,#+218
   \   00000006   0x.... 0x....      BL       OLED_WrCmd
    318          	OLED_WrCmd(0x02|d);		// Default => 0x12 (0x10)
   \   0000000A   0xF054 0x0002      ORRS     R0,R4,#0x2
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       OLED_WrCmd
    319          							// Alternative COM Pin Configuration
    320          							// Disable COM Left/Right Re-Map
    321          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    322          

   \                                 In section .text, align 2, keep-with-next
    323          void Set_VCOMH(unsigned char d)
    324          {
   \                     Set_VCOMH: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    325          	OLED_WrCmd(0xDB);			// Set VCOMH Deselect Level
   \   00000004   0x20DB             MOVS     R0,#+219
   \   00000006   0x.... 0x....      BL       OLED_WrCmd
    326          	OLED_WrCmd(d);			        // Default => 0x20 (0.77*VCC)
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       OLED_WrCmd
    327          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    328          

   \                                 In section .text, align 2, keep-with-next
    329          void Set_NOP(void)
    330          {
   \                     Set_NOP: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    331          	OLED_WrCmd(0xE3);			// Command for No Operation
   \   00000002   0x20E3             MOVS     R0,#+227
   \   00000004   0x.... 0x....      BL       OLED_WrCmd
    332          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    333          void OLED_Init(void)        
    334          {  
   \                     OLED_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    335                  OLED_DC(0);		
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x2111             MOVS     R1,#+17
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   0000000A   0x.... 0x....      BL       LPLD_GPIO_Output_b
    336          	OLED_D1(0);
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x2119             MOVS     R1,#+25
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   00000016   0x.... 0x....      BL       LPLD_GPIO_Output_b
    337                  OLED_D0(0);		
   \   0000001A   0x2200             MOVS     R2,#+0
   \   0000001C   0x2118             MOVS     R1,#+24
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   00000022   0x.... 0x....      BL       LPLD_GPIO_Output_b
    338          	OLED_RST(0);
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x2110             MOVS     R1,#+16
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   0000002E   0x.... 0x....      BL       LPLD_GPIO_Output_b
    339                  OLED_DLY_ms(50);
   \   00000032   0x2032             MOVS     R0,#+50
   \   00000034   0x.... 0x....      BL       OLED_DLY_ms
    340          	OLED_D0(1);		
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x2118             MOVS     R1,#+24
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   00000040   0x.... 0x....      BL       LPLD_GPIO_Output_b
    341          	OLED_RST(0);
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x2110             MOVS     R1,#+16
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   0000004C   0x.... 0x....      BL       LPLD_GPIO_Output_b
    342                  OLED_DLY_ms(50);
   \   00000050   0x2032             MOVS     R0,#+50
   \   00000052   0x.... 0x....      BL       OLED_DLY_ms
    343          	OLED_RST(1);
   \   00000056   0x2201             MOVS     R2,#+1
   \   00000058   0x2110             MOVS     R1,#+16
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x400ff000
   \   0000005E   0x.... 0x....      BL       LPLD_GPIO_Output_b
    344          	Set_Display_On_Off(0x00);	      // Display Off (0x00/0x01)
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x.... 0x....      BL       Set_Display_On_Off
    345          	Set_Display_Clock(0x80);	      // Set Clock as 100 Frames/Sec
   \   00000068   0x2080             MOVS     R0,#+128
   \   0000006A   0x.... 0x....      BL       Set_Display_Clock
    346          	Set_Multiplex_Ratio(0x3F);	      // 1/64 Duty (0x0F~0x3F)
   \   0000006E   0x203F             MOVS     R0,#+63
   \   00000070   0x.... 0x....      BL       Set_Multiplex_Ratio
    347          	Set_Display_Offset(0x00);	      // Shift Mapping RAM Counter (0x00~0x3F)
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x.... 0x....      BL       Set_Display_Offset
    348          	SetStartLine(0x00);		      // Set Mapping RAM Display Start Line (0x00~0x3F)
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x.... 0x....      BL       SetStartLine
    349          	Set_Charge_Pump(0x04);		      // Enable Embedded DC/DC Converter (0x00/0x04)
   \   00000080   0x2004             MOVS     R0,#+4
   \   00000082   0x.... 0x....      BL       Set_Charge_Pump
    350          	SetAddressingMode(0x02);	      // Set Page Addressing Mode (0x00/0x01/0x02)
   \   00000086   0x2002             MOVS     R0,#+2
   \   00000088   0x.... 0x....      BL       SetAddressingMode
    351          	Set_Segment_Remap(0x01);	      // Set SEG/Column Mapping     0x00左右反置 0x01正常
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x.... 0x....      BL       Set_Segment_Remap
    352          	Set_Common_Remap(0x08);	              // Set COM/Row Scan Direction 0x00上下反置 0x08正常
   \   00000092   0x2008             MOVS     R0,#+8
   \   00000094   0x.... 0x....      BL       Set_Common_Remap
    353          	Set_Common_Config(0x10);	      // Set Sequential Configuration (0x00/0x10)
   \   00000098   0x2010             MOVS     R0,#+16
   \   0000009A   0x.... 0x....      BL       Set_Common_Config
    354          	SetContrastControl(0xCF);             // Set SEG Output Current
   \   0000009E   0x20CF             MOVS     R0,#+207
   \   000000A0   0x.... 0x....      BL       SetContrastControl
    355          	Set_Precharge_Period(0xF1);	      // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
   \   000000A4   0x20F1             MOVS     R0,#+241
   \   000000A6   0x.... 0x....      BL       Set_Precharge_Period
    356          	Set_VCOMH(0x40);		      // Set VCOM Deselect Level
   \   000000AA   0x2040             MOVS     R0,#+64
   \   000000AC   0x.... 0x....      BL       Set_VCOMH
    357          	Set_Entire_Display(0x00);	      // Disable Entire Display On (0x00/0x01)
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x.... 0x....      BL       Set_Entire_Display
    358          	Set_Inverse_Display(0x00);	      // Disable Inverse Display On (0x00/0x01)  
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x.... 0x....      BL       Set_Inverse_Display
    359          	Set_Display_On_Off(0x01);	      // Display On (0x00/0x01)
   \   000000BC   0x2001             MOVS     R0,#+1
   \   000000BE   0x.... 0x....      BL       Set_Display_On_Off
    360          	OLED_Fill(0x00);                      //初始清屏
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x.... 0x....      BL       OLED_Fill
    361          	OLED_Set_Pos(0,0); 	
   \   000000C8   0x2100             MOVS     R1,#+0
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x.... 0x....      BL       OLED_Set_Pos
    362          } 
   \   000000D0   0xBD01             POP      {R0,PC}          ;; return
    363          //显示一个6x8标准ASCII字符

   \                                 In section .text, align 2, keep-with-next
    364          void OLED_P6x8Char(unsigned char ch)
    365          {
   \                     OLED_P6x8Char: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    366          	 unsigned char c=0,i=0,rs=0;       
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x2600             MOVS     R6,#+0
    367          	c =ch-32;
   \   00000008   0xF1B0 0x0420      SUBS     R4,R0,#+32
    368                   if(reverse&&c) rs=1;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD003             BEQ.N    ??OLED_P6x8Char_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD000             BEQ.N    ??OLED_P6x8Char_0
   \   0000001C   0x2601             MOVS     R6,#+1
    369          	for(i=0;i<6;i++)
   \                     ??OLED_P6x8Char_0: (+1)
   \   0000001E   0x2500             MOVS     R5,#+0
   \   00000020   0xE00C             B.N      ??OLED_P6x8Char_1
    370          	{     
    371                        OLED_WrDat(F6x8[c][i],rs);  
   \                     ??OLED_P6x8Char_2: (+1)
   \   00000022   0x0031             MOVS     R1,R6
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   0000002A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   0x2206             MOVS     R2,#+6
   \   0000002E   0xFB02 0x0004      MLA      R0,R2,R4,R0
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0x5C28             LDRB     R0,[R5, R0]
   \   00000036   0x.... 0x....      BL       OLED_WrDat
    372          	}
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??OLED_P6x8Char_1: (+1)
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0x2D06             CMP      R5,#+6
   \   00000040   0xDBEF             BLT.N    ??OLED_P6x8Char_2
    373          }
   \   00000042   0xBD70             POP      {R4-R6,PC}       ;; return
    374          //功能描述：写入一组6x8标准ASCII字符串 

   \                                 In section .text, align 2, keep-with-next
    375          void OLED_P6x8Str(unsigned char x,unsigned char y,char ch[])
    376          {
   \                     OLED_P6x8Str: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    377          	unsigned char c=0,i=0,j=0,rs=0;      
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
   \   0000000E   0xF05F 0x0900      MOVS     R9,#+0
   \   00000012   0x2700             MOVS     R7,#+0
   \   00000014   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000018   0xE017             B.N      ??OLED_P6x8Str_0
    378          	while (ch[j]!='\0')
    379          	{    
    380          		c =ch[j]-32;            
    381                          if(reverse&&c) rs=1;  //是否反转显示
    382                          else rs=0;               
    383          		if(x>126)
    384          		{
    385          			x=0;
    386          			y++;
    387          		}
    388          		OLED_Set_Pos(x,y);    
    389          		for(i=0;i<6;i++)
    390          		{     
    391                            OLED_WrDat(F6x8[c][i],rs);
   \                     ??OLED_P6x8Str_1: (+1)
   \   0000001A   0x4651             MOV      R1,R10
   \   0000001C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   00000022   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000026   0x2206             MOVS     R2,#+6
   \   00000028   0xFB02 0x0008      MLA      R0,R2,R8,R0
   \   0000002C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000030   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   00000034   0x.... 0x....      BL       OLED_WrDat
    392          		}
   \   00000038   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??OLED_P6x8Str_2: (+1)
   \   0000003C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000040   0xF1B9 0x0F06      CMP      R9,#+6
   \   00000044   0xDBE9             BLT.N    ??OLED_P6x8Str_1
    393          		x+=6;
   \   00000046   0x1DA4             ADDS     R4,R4,#+6
    394          		j++;
   \   00000048   0x1C7F             ADDS     R7,R7,#+1
   \                     ??OLED_P6x8Str_0: (+1)
   \   0000004A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004C   0x5DB8             LDRB     R0,[R7, R6]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD020             BEQ.N    ??OLED_P6x8Str_3
   \   00000052   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000054   0x5DB8             LDRB     R0,[R7, R6]
   \   00000056   0xF1B0 0x0820      SUBS     R8,R0,#+32
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD007             BEQ.N    ??OLED_P6x8Str_4
   \   00000064   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000068   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000006C   0xD002             BEQ.N    ??OLED_P6x8Str_4
   \   0000006E   0xF05F 0x0A01      MOVS     R10,#+1
   \   00000072   0xE001             B.N      ??OLED_P6x8Str_5
   \                     ??OLED_P6x8Str_4: (+1)
   \   00000074   0xF05F 0x0A00      MOVS     R10,#+0
   \                     ??OLED_P6x8Str_5: (+1)
   \   00000078   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007A   0x2C7F             CMP      R4,#+127
   \   0000007C   0xDB01             BLT.N    ??OLED_P6x8Str_6
   \   0000007E   0x2400             MOVS     R4,#+0
   \   00000080   0x1C6D             ADDS     R5,R5,#+1
   \                     ??OLED_P6x8Str_6: (+1)
   \   00000082   0x0029             MOVS     R1,R5
   \   00000084   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000086   0x0020             MOVS     R0,R4
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008A   0x.... 0x....      BL       OLED_Set_Pos
   \   0000008E   0xF05F 0x0900      MOVS     R9,#+0
   \   00000092   0xE7D3             B.N      ??OLED_P6x8Str_2
    395          	}
    396          }
   \                     ??OLED_P6x8Str_3: (+1)
   \   00000094   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    397          //将一个char型数转换成3位数进行显示

   \                                 In section .text, align 2, keep-with-next
    398          void OLED_PrintValueC(unsigned char x, unsigned char y, int data)
    399          {
   \                     OLED_PrintValueC: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0014             MOVS     R4,R2
    400                  OLED_Set_Pos(x,y); 
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       OLED_Set_Pos
    401          	unsigned char i,j,k;
    402          	if(data<0)
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD504             BPL.N    ??OLED_PrintValueC_0
    403          	{
    404          		OLED_P6x8Char('-');
   \   00000010   0x202D             MOVS     R0,#+45
   \   00000012   0x.... 0x....      BL       OLED_P6x8Char
    405          		data = - data;	
   \   00000016   0x4264             RSBS     R4,R4,#+0
   \   00000018   0xE002             B.N      ??OLED_PrintValueC_1
    406          	}
    407          	else
    408          	{
    409          		OLED_P6x8Char('+');
   \                     ??OLED_PrintValueC_0: (+1)
   \   0000001A   0x202B             MOVS     R0,#+43
   \   0000001C   0x.... 0x....      BL       OLED_P6x8Char
    410          	}
    411          	i = data/100;
   \                     ??OLED_PrintValueC_1: (+1)
   \   00000020   0x2064             MOVS     R0,#+100
   \   00000022   0xFB94 0xF0F0      SDIV     R0,R4,R0
    412          	j = (data%100)/10;
   \   00000026   0x2164             MOVS     R1,#+100
   \   00000028   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   0000002C   0xFB01 0x4112      MLS      R1,R1,R2,R4
   \   00000030   0x220A             MOVS     R2,#+10
   \   00000032   0xFB91 0xF5F2      SDIV     R5,R1,R2
    413          	k = data%10;
   \   00000036   0x210A             MOVS     R1,#+10
   \   00000038   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   0000003C   0xFB01 0x4412      MLS      R4,R1,R2,R4
    414          	OLED_P6x8Char(i+48);
   \   00000040   0x3030             ADDS     R0,R0,#+48
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x.... 0x....      BL       OLED_P6x8Char
    415          	OLED_P6x8Char(j+48);
   \   00000048   0xF115 0x0030      ADDS     R0,R5,#+48
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x.... 0x....      BL       OLED_P6x8Char
    416          	OLED_P6x8Char(k+48);		
   \   00000052   0xF114 0x0030      ADDS     R0,R4,#+48
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0x.... 0x....      BL       OLED_P6x8Char
    417          }
   \   0000005C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    418          //功能描述：将一个int型数转换成5位数进行显示

   \                                 In section .text, align 2, keep-with-next
    419          void OLED_PrintValueI(unsigned char x, unsigned char y, int data)
    420          {       
   \                     OLED_PrintValueI: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0014             MOVS     R4,R2
    421                  OLED_Set_Pos(x,y); 
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       OLED_Set_Pos
    422          	unsigned char i,j,k,l,m,fn=0;  
   \   0000000E   0x2500             MOVS     R5,#+0
    423          
    424          	l  = data/10000;
   \   00000010   0xF242 0x7010      MOVW     R0,#+10000
   \   00000014   0xFB94 0xF6F0      SDIV     R6,R4,R0
    425          	m= (data%10000)/1000;
   \   00000018   0xF242 0x7010      MOVW     R0,#+10000
   \   0000001C   0xFB94 0xF1F0      SDIV     R1,R4,R0
   \   00000020   0xFB00 0x4011      MLS      R0,R0,R1,R4
   \   00000024   0xF44F 0x717A      MOV      R1,#+1000
   \   00000028   0xFB90 0xF7F1      SDIV     R7,R0,R1
    426          	i = (data%1000)/100;
   \   0000002C   0xF44F 0x707A      MOV      R0,#+1000
   \   00000030   0xFB94 0xF1F0      SDIV     R1,R4,R0
   \   00000034   0xFB00 0x4011      MLS      R0,R0,R1,R4
   \   00000038   0x2164             MOVS     R1,#+100
   \   0000003A   0xFB90 0xF8F1      SDIV     R8,R0,R1
    427          	j = (data%100)/10;
   \   0000003E   0x2064             MOVS     R0,#+100
   \   00000040   0xFB94 0xF1F0      SDIV     R1,R4,R0
   \   00000044   0xFB00 0x4011      MLS      R0,R0,R1,R4
   \   00000048   0x210A             MOVS     R1,#+10
   \   0000004A   0xFB90 0xF9F1      SDIV     R9,R0,R1
    428          	k = data%10;
   \   0000004E   0x200A             MOVS     R0,#+10
   \   00000050   0xFB94 0xF1F0      SDIV     R1,R4,R0
   \   00000054   0xFB00 0x4A11      MLS      R10,R0,R1,R4
    429          	if(data < 0)
   \   00000058   0x2C00             CMP      R4,#+0
   \   0000005A   0xD503             BPL.N    ??OLED_PrintValueI_0
    430          	{
    431          		OLED_P6x8Char('-');
   \   0000005C   0x202D             MOVS     R0,#+45
   \   0000005E   0x.... 0x....      BL       OLED_P6x8Char
    432          		data = - data;	
   \   00000062   0x4264             RSBS     R4,R4,#+0
    433          	}
    434                  if(l)
   \                     ??OLED_PrintValueI_0: (+1)
   \   00000064   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000066   0x2E00             CMP      R6,#+0
   \   00000068   0xD005             BEQ.N    ??OLED_PrintValueI_1
    435                  {
    436                    OLED_P6x8Char(l+48);
   \   0000006A   0xF116 0x0030      ADDS     R0,R6,#+48
   \   0000006E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   0x.... 0x....      BL       OLED_P6x8Char
    437                    fn=1;
   \   00000074   0x2501             MOVS     R5,#+1
    438                  }
    439          	if(m||fn)
   \                     ??OLED_PrintValueI_1: (+1)
   \   00000076   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000078   0x2F00             CMP      R7,#+0
   \   0000007A   0xD102             BNE.N    ??OLED_PrintValueI_2
   \   0000007C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000007E   0x2D00             CMP      R5,#+0
   \   00000080   0xD005             BEQ.N    ??OLED_PrintValueI_3
    440                  {
    441                    OLED_P6x8Char(m+48);
   \                     ??OLED_PrintValueI_2: (+1)
   \   00000082   0xF117 0x0030      ADDS     R0,R7,#+48
   \   00000086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   0x.... 0x....      BL       OLED_P6x8Char
    442                    fn=1;
   \   0000008C   0x2501             MOVS     R5,#+1
    443                  }
    444          	if(i||fn)
   \                     ??OLED_PrintValueI_3: (+1)
   \   0000008E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000092   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000096   0xD102             BNE.N    ??OLED_PrintValueI_4
   \   00000098   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009A   0x2D00             CMP      R5,#+0
   \   0000009C   0xD005             BEQ.N    ??OLED_PrintValueI_5
    445                  {
    446                    OLED_P6x8Char(i+48);
   \                     ??OLED_PrintValueI_4: (+1)
   \   0000009E   0xF118 0x0030      ADDS     R0,R8,#+48
   \   000000A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A4   0x.... 0x....      BL       OLED_P6x8Char
    447                    fn=1;
   \   000000A8   0x2501             MOVS     R5,#+1
    448                  }
    449          	if(j||fn)
   \                     ??OLED_PrintValueI_5: (+1)
   \   000000AA   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000AE   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000B2   0xD102             BNE.N    ??OLED_PrintValueI_6
   \   000000B4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B6   0x2D00             CMP      R5,#+0
   \   000000B8   0xD004             BEQ.N    ??OLED_PrintValueI_7
    450                    OLED_P6x8Char(j+48);
   \                     ??OLED_PrintValueI_6: (+1)
   \   000000BA   0xF119 0x0030      ADDS     R0,R9,#+48
   \   000000BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C0   0x.... 0x....      BL       OLED_P6x8Char
    451          	OLED_P6x8Char(k+48);	
   \                     ??OLED_PrintValueI_7: (+1)
   \   000000C4   0xF11A 0x0030      ADDS     R0,R10,#+48
   \   000000C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CA   0x.... 0x....      BL       OLED_P6x8Char
    452          }
   \   000000CE   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    453          //显示unsigned int型

   \                                 In section .text, align 2, keep-with-next
    454           void OLED_PrintValueFP(unsigned int data, unsigned char num)
    455           {     unsigned char m,i,j,k;   	
   \                     OLED_PrintValueFP: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    456           	OLED_P6x8Char('.');
   \   00000006   0x202E             MOVS     R0,#+46
   \   00000008   0x.... 0x....      BL       OLED_P6x8Char
    457                  
    458          	m= data/1000;
   \   0000000C   0xF44F 0x707A      MOV      R0,#+1000
   \   00000010   0xFBB5 0xF0F0      UDIV     R0,R5,R0
    459          	i = (data%1000)/100;
   \   00000014   0xF44F 0x717A      MOV      R1,#+1000
   \   00000018   0xFBB5 0xF2F1      UDIV     R2,R5,R1
   \   0000001C   0xFB01 0x5112      MLS      R1,R1,R2,R5
   \   00000020   0x2264             MOVS     R2,#+100
   \   00000022   0xFBB1 0xF6F2      UDIV     R6,R1,R2
    460          	j = (data%100)/10;
   \   00000026   0x2164             MOVS     R1,#+100
   \   00000028   0xFBB5 0xF2F1      UDIV     R2,R5,R1
   \   0000002C   0xFB01 0x5112      MLS      R1,R1,R2,R5
   \   00000030   0x220A             MOVS     R2,#+10
   \   00000032   0xFBB1 0xF7F2      UDIV     R7,R1,R2
    461          	k = data%10;
   \   00000036   0x210A             MOVS     R1,#+10
   \   00000038   0xFBB5 0xF2F1      UDIV     R2,R5,R1
   \   0000003C   0xFB01 0x5512      MLS      R5,R1,R2,R5
    462          	switch(num)
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x2C01             CMP      R4,#+1
   \   00000044   0xD006             BEQ.N    ??OLED_PrintValueFP_0
   \   00000046   0xD339             BCC.N    ??OLED_PrintValueFP_1
   \   00000048   0x2C03             CMP      R4,#+3
   \   0000004A   0xD014             BEQ.N    ??OLED_PrintValueFP_2
   \   0000004C   0xD308             BCC.N    ??OLED_PrintValueFP_3
   \   0000004E   0x2C04             CMP      R4,#+4
   \   00000050   0xD021             BEQ.N    ??OLED_PrintValueFP_4
   \   00000052   0xE033             B.N      ??OLED_PrintValueFP_1
    463          	{
    464          
    465          		case 1:  	OLED_P6x8Char(k+48);
   \                     ??OLED_PrintValueFP_0: (+1)
   \   00000054   0xF115 0x0030      ADDS     R0,R5,#+48
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0x.... 0x....      BL       OLED_P6x8Char
    466          				break;
   \   0000005E   0xE02D             B.N      ??OLED_PrintValueFP_1
    467          		case 2:  	OLED_P6x8Char(j+48);
   \                     ??OLED_PrintValueFP_3: (+1)
   \   00000060   0xF117 0x0030      ADDS     R0,R7,#+48
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x.... 0x....      BL       OLED_P6x8Char
    468          				OLED_P6x8Char(k+48);
   \   0000006A   0xF115 0x0030      ADDS     R0,R5,#+48
   \   0000006E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   0x.... 0x....      BL       OLED_P6x8Char
    469          				break;
   \   00000074   0xE022             B.N      ??OLED_PrintValueFP_1
    470          		case 3:	OLED_P6x8Char(i+48);
   \                     ??OLED_PrintValueFP_2: (+1)
   \   00000076   0xF116 0x0030      ADDS     R0,R6,#+48
   \   0000007A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007C   0x.... 0x....      BL       OLED_P6x8Char
    471          				OLED_P6x8Char(j+48);
   \   00000080   0xF117 0x0030      ADDS     R0,R7,#+48
   \   00000084   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000086   0x.... 0x....      BL       OLED_P6x8Char
    472          				OLED_P6x8Char(k+48);
   \   0000008A   0xF115 0x0030      ADDS     R0,R5,#+48
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0x.... 0x....      BL       OLED_P6x8Char
    473          				break;
   \   00000094   0xE012             B.N      ??OLED_PrintValueFP_1
    474          		case 4: 	OLED_P6x8Char(m+48);
   \                     ??OLED_PrintValueFP_4: (+1)
   \   00000096   0x3030             ADDS     R0,R0,#+48
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0x.... 0x....      BL       OLED_P6x8Char
    475          				OLED_P6x8Char(i+48);
   \   0000009E   0xF116 0x0030      ADDS     R0,R6,#+48
   \   000000A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A4   0x.... 0x....      BL       OLED_P6x8Char
    476          				OLED_P6x8Char(j+48);
   \   000000A8   0xF117 0x0030      ADDS     R0,R7,#+48
   \   000000AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AE   0x.... 0x....      BL       OLED_P6x8Char
    477          				OLED_P6x8Char(k+48);
   \   000000B2   0xF115 0x0030      ADDS     R0,R5,#+48
   \   000000B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B8   0x.... 0x....      BL       OLED_P6x8Char
    478          				break;	
    479          	}
    480                  OLED_P6x8Char(' ');     //清空后一位
   \                     ??OLED_PrintValueFP_1: (+1)
   \   000000BC   0x2020             MOVS     R0,#+32
   \   000000BE   0x.... 0x....      BL       OLED_P6x8Char
    481           }
   \   000000C2   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    482          //功能描述：将一个float型数转换成2位整数部分带4位小数和符号的数据并进行显示

   \                                 In section .text, align 2, keep-with-next
    483           void OLED_PrintValueF(unsigned char x, unsigned char y, float data, unsigned char num)
    484           {
   \                     OLED_PrintValueF: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x4691             MOV      R9,R2
   \   0000000A   0x001E             MOVS     R6,R3
    485           	unsigned char l,m,i,j,k;  //wan
    486           	unsigned char Integer_Len = 6; //整数位数         
   \   0000000C   0xF05F 0x0806      MOVS     R8,#+6
    487                  
    488                  if(data>0)       
   \   00000010   0x4648             MOV      R0,R9
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000018   0xD209             BCS.N    ??OLED_PrintValueF_0
    489                  data=data+0.00001;
   \   0000001A   0x4648             MOV      R0,R9
   \   0000001C   0x.... 0x....      BL       __aeabi_f2d
   \   00000020   0x....             LDR.N    R2,??DataTable6_3  ;; 0x88e368f1
   \   00000022   0x....             LDR.N    R3,??DataTable6_4  ;; 0x3ee4f8b5
   \   00000024   0x.... 0x....      BL       __aeabi_dadd
   \   00000028   0x.... 0x....      BL       __aeabi_d2f
   \   0000002C   0x4681             MOV      R9,R0
    490            	int Integer_Part = (int)data; //整数部分
   \                     ??OLED_PrintValueF_0: (+1)
   \   0000002E   0x4648             MOV      R0,R9
   \   00000030   0x.... 0x....      BL       __aeabi_f2iz
   \   00000034   0x4680             MOV      R8,R0
    491           	long int Float_Part = (long int)((data - (int)data)*100000); //取小数位后5位
   \   00000036   0x4648             MOV      R0,R9
   \   00000038   0x.... 0x....      BL       __aeabi_f2iz
   \   0000003C   0x.... 0x....      BL       __aeabi_i2f
   \   00000040   0x0001             MOVS     R1,R0
   \   00000042   0x4648             MOV      R0,R9
   \   00000044   0x.... 0x....      BL       __aeabi_fsub
   \   00000048   0x....             LDR.N    R1,??DataTable6_5  ;; 0x47c35000
   \   0000004A   0x.... 0x....      BL       __aeabi_fmul
   \   0000004E   0x.... 0x....      BL       __aeabi_f2iz
   \   00000052   0x0007             MOVS     R7,R0
    492                  OLED_Set_Pos(x,y); 
   \   00000054   0x0029             MOVS     R1,R5
   \   00000056   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x.... 0x....      BL       OLED_Set_Pos
    493           	//整数部分显示
    494                   
    495               
    496                  
    497                  if(data<-0.00001)
   \   00000060   0x4648             MOV      R0,R9
   \   00000062   0x....             LDR.N    R1,??DataTable6_6  ;; 0xb727c5ac
   \   00000064   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000068   0xD202             BCS.N    ??OLED_PrintValueF_1
    498                  OLED_P6x8Char('-'); 
   \   0000006A   0x202D             MOVS     R0,#+45
   \   0000006C   0x.... 0x....      BL       OLED_P6x8Char
    499          
    500          	if(Integer_Part < 0)Integer_Part = - Integer_Part;  //去掉整数部分负号
   \                     ??OLED_PrintValueF_1: (+1)
   \   00000070   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000074   0xD501             BPL.N    ??OLED_PrintValueF_2
   \   00000076   0xF1D8 0x0800      RSBS     R8,R8,#+0
    501           	l  = Integer_Part/10000;
   \                     ??OLED_PrintValueF_2: (+1)
   \   0000007A   0xF242 0x7010      MOVW     R0,#+10000
   \   0000007E   0xFB98 0xF0F0      SDIV     R0,R8,R0
    502          	m= (Integer_Part%10000)/1000;
   \   00000082   0xF242 0x7110      MOVW     R1,#+10000
   \   00000086   0xFB98 0xF2F1      SDIV     R2,R8,R1
   \   0000008A   0xFB01 0x8112      MLS      R1,R1,R2,R8
   \   0000008E   0xF44F 0x727A      MOV      R2,#+1000
   \   00000092   0xFB91 0xF4F2      SDIV     R4,R1,R2
    503          	i = (Integer_Part%1000)/100;
   \   00000096   0xF44F 0x717A      MOV      R1,#+1000
   \   0000009A   0xFB98 0xF2F1      SDIV     R2,R8,R1
   \   0000009E   0xFB01 0x8112      MLS      R1,R1,R2,R8
   \   000000A2   0x2264             MOVS     R2,#+100
   \   000000A4   0xFB91 0xF5F2      SDIV     R5,R1,R2
    504          	j = (Integer_Part%100)/10;
   \   000000A8   0x2164             MOVS     R1,#+100
   \   000000AA   0xFB98 0xF2F1      SDIV     R2,R8,R1
   \   000000AE   0xFB01 0x8112      MLS      R1,R1,R2,R8
   \   000000B2   0x220A             MOVS     R2,#+10
   \   000000B4   0xFB91 0xF9F2      SDIV     R9,R1,R2
    505          	k = Integer_Part%10;
   \   000000B8   0x210A             MOVS     R1,#+10
   \   000000BA   0xFB98 0xF2F1      SDIV     R2,R8,R1
   \   000000BE   0xFB01 0x8A12      MLS      R10,R1,R2,R8
    506                  
    507                  
    508                  
    509                  
    510           	if (l != 0)  //五位
   \   000000C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xD01A             BEQ.N    ??OLED_PrintValueF_3
    511           	{
    512                          Integer_Len = 5;
   \   000000C8   0xF05F 0x0805      MOVS     R8,#+5
    513           		OLED_P6x8Char(l+48);
   \   000000CC   0x3030             ADDS     R0,R0,#+48
   \   000000CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D0   0x.... 0x....      BL       OLED_P6x8Char
    514           		OLED_P6x8Char(m+48);
   \   000000D4   0xF114 0x0030      ADDS     R0,R4,#+48
   \   000000D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DA   0x.... 0x....      BL       OLED_P6x8Char
    515          		OLED_P6x8Char(i+48);
   \   000000DE   0xF115 0x0030      ADDS     R0,R5,#+48
   \   000000E2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E4   0x.... 0x....      BL       OLED_P6x8Char
    516          		OLED_P6x8Char(j+48);
   \   000000E8   0xF119 0x0030      ADDS     R0,R9,#+48
   \   000000EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EE   0x.... 0x....      BL       OLED_P6x8Char
    517          		OLED_P6x8Char(k+48);
   \   000000F2   0xF11A 0x0030      ADDS     R0,R10,#+48
   \   000000F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F8   0x.... 0x....      BL       OLED_P6x8Char
   \   000000FC   0xE047             B.N      ??OLED_PrintValueF_4
    518           	}
    519           	else if(m != 0) //四位
   \                     ??OLED_PrintValueF_3: (+1)
   \   000000FE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000100   0x2C00             CMP      R4,#+0
   \   00000102   0xD016             BEQ.N    ??OLED_PrintValueF_5
    520           	{
    521           		Integer_Len = 4;
   \   00000104   0xF05F 0x0804      MOVS     R8,#+4
    522           		OLED_P6x8Char(m+48);
   \   00000108   0xF114 0x0030      ADDS     R0,R4,#+48
   \   0000010C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010E   0x.... 0x....      BL       OLED_P6x8Char
    523           		OLED_P6x8Char(i+48);
   \   00000112   0xF115 0x0030      ADDS     R0,R5,#+48
   \   00000116   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000118   0x.... 0x....      BL       OLED_P6x8Char
    524          		OLED_P6x8Char(j+48);
   \   0000011C   0xF119 0x0030      ADDS     R0,R9,#+48
   \   00000120   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000122   0x.... 0x....      BL       OLED_P6x8Char
    525          		OLED_P6x8Char(k+48);
   \   00000126   0xF11A 0x0030      ADDS     R0,R10,#+48
   \   0000012A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000012C   0x.... 0x....      BL       OLED_P6x8Char
   \   00000130   0xE02D             B.N      ??OLED_PrintValueF_4
    526           	}
    527            	else if(i != 0) //三位
   \                     ??OLED_PrintValueF_5: (+1)
   \   00000132   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000134   0x2D00             CMP      R5,#+0
   \   00000136   0xD011             BEQ.N    ??OLED_PrintValueF_6
    528            	{
    529            		Integer_Len = 3;
   \   00000138   0xF05F 0x0803      MOVS     R8,#+3
    530            	 	OLED_P6x8Char(i+48);
   \   0000013C   0xF115 0x0030      ADDS     R0,R5,#+48
   \   00000140   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000142   0x.... 0x....      BL       OLED_P6x8Char
    531           		OLED_P6x8Char(j+48);
   \   00000146   0xF119 0x0030      ADDS     R0,R9,#+48
   \   0000014A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000014C   0x.... 0x....      BL       OLED_P6x8Char
    532          		OLED_P6x8Char(k+48);
   \   00000150   0xF11A 0x0030      ADDS     R0,R10,#+48
   \   00000154   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000156   0x.... 0x....      BL       OLED_P6x8Char
   \   0000015A   0xE018             B.N      ??OLED_PrintValueF_4
    533            	}
    534            	else if(j != 0) //两位
   \                     ??OLED_PrintValueF_6: (+1)
   \   0000015C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000160   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000164   0xD00C             BEQ.N    ??OLED_PrintValueF_7
    535            	{
    536              		Integer_Len = 2;	
   \   00000166   0xF05F 0x0802      MOVS     R8,#+2
    537            		OLED_P6x8Char(j+48);
   \   0000016A   0xF119 0x0030      ADDS     R0,R9,#+48
   \   0000016E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000170   0x.... 0x....      BL       OLED_P6x8Char
    538           		OLED_P6x8Char(k+48);
   \   00000174   0xF11A 0x0030      ADDS     R0,R10,#+48
   \   00000178   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000017A   0x.... 0x....      BL       OLED_P6x8Char
   \   0000017E   0xE006             B.N      ??OLED_PrintValueF_4
    539            	}
    540          	else 	
    541          	{
    542          		Integer_Len = 1;
   \                     ??OLED_PrintValueF_7: (+1)
   \   00000180   0xF05F 0x0801      MOVS     R8,#+1
    543          		OLED_P6x8Char(k+48);
   \   00000184   0xF11A 0x0030      ADDS     R0,R10,#+48
   \   00000188   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000018A   0x.... 0x....      BL       OLED_P6x8Char
    544          	}	
    545                  if(Float_Part < 0)Float_Part = -Float_Part;
   \                     ??OLED_PrintValueF_4: (+1)
   \   0000018E   0x2F00             CMP      R7,#+0
   \   00000190   0xD500             BPL.N    ??OLED_PrintValueF_8
   \   00000192   0x427F             RSBS     R7,R7,#+0
    546          	switch(num-Integer_Len)
   \                     ??OLED_PrintValueF_8: (+1)
   \   00000194   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000196   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000019A   0xEBB6 0x0008      SUBS     R0,R6,R8
   \   0000019E   0x2800             CMP      R0,#+0
   \   000001A0   0xD006             BEQ.N    ??OLED_PrintValueF_9
   \   000001A2   0x2802             CMP      R0,#+2
   \   000001A4   0xD012             BEQ.N    ??OLED_PrintValueF_10
   \   000001A6   0xD307             BCC.N    ??OLED_PrintValueF_11
   \   000001A8   0x2804             CMP      R0,#+4
   \   000001AA   0xD022             BEQ.N    ??OLED_PrintValueF_12
   \   000001AC   0xD318             BCC.N    ??OLED_PrintValueF_13
   \   000001AE   0xE028             B.N      ??OLED_PrintValueF_14
    547          	{
    548          		case 0:   OLED_P6x8Char(' '); break;
   \                     ??OLED_PrintValueF_9: (+1)
   \   000001B0   0x2020             MOVS     R0,#+32
   \   000001B2   0x.... 0x....      BL       OLED_P6x8Char
   \   000001B6   0xE024             B.N      ??OLED_PrintValueF_14
    549          		case 1:  OLED_PrintValueFP((unsigned int)(Float_Part /10000),num-Integer_Len);break;
   \                     ??OLED_PrintValueF_11: (+1)
   \   000001B8   0xEBB6 0x0108      SUBS     R1,R6,R8
   \   000001BC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001BE   0xF242 0x7010      MOVW     R0,#+10000
   \   000001C2   0xFB97 0xF0F0      SDIV     R0,R7,R0
   \   000001C6   0x.... 0x....      BL       OLED_PrintValueFP
   \   000001CA   0xE01A             B.N      ??OLED_PrintValueF_14
    550          		case 2:  OLED_PrintValueFP((unsigned int)(Float_Part /1000),num-Integer_Len);break;
   \                     ??OLED_PrintValueF_10: (+1)
   \   000001CC   0xEBB6 0x0108      SUBS     R1,R6,R8
   \   000001D0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001D2   0xF44F 0x707A      MOV      R0,#+1000
   \   000001D6   0xFB97 0xF0F0      SDIV     R0,R7,R0
   \   000001DA   0x.... 0x....      BL       OLED_PrintValueFP
   \   000001DE   0xE010             B.N      ??OLED_PrintValueF_14
    551          		case 3:  OLED_PrintValueFP((unsigned int)(Float_Part /100),num-Integer_Len);break;
   \                     ??OLED_PrintValueF_13: (+1)
   \   000001E0   0xEBB6 0x0108      SUBS     R1,R6,R8
   \   000001E4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001E6   0x2064             MOVS     R0,#+100
   \   000001E8   0xFB97 0xF0F0      SDIV     R0,R7,R0
   \   000001EC   0x.... 0x....      BL       OLED_PrintValueFP
   \   000001F0   0xE007             B.N      ??OLED_PrintValueF_14
    552          		case 4:  OLED_PrintValueFP((unsigned int)(Float_Part/10),num-Integer_Len);break;					
   \                     ??OLED_PrintValueF_12: (+1)
   \   000001F2   0xEBB6 0x0108      SUBS     R1,R6,R8
   \   000001F6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001F8   0x200A             MOVS     R0,#+10
   \   000001FA   0xFB97 0xF0F0      SDIV     R0,R7,R0
   \   000001FE   0x.... 0x....      BL       OLED_PrintValueFP
    553          	}
    554           }
   \                     ??OLED_PrintValueF_14: (+1)
   \   00000202   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    555          
    556          

   \                                 In section .text, align 2, keep-with-next
    557           void showimage(unsigned char *image)
    558           {
   \                     showimage: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    559          	 unsigned int I=0, J=0,k=0;
   \   00000002   0x2500             MOVS     R5,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2100             MOVS     R1,#+0
    560          	static unsigned char l[140];
    561          	 for ( k = 1; k < 127;k++ )
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0xE003             B.N      ??showimage_0
    562          	 {
    563          		 l[k] = image[k];
   \                     ??showimage_1: (+1)
   \   0000000C   0x5C0A             LDRB     R2,[R1, R0]
   \   0000000E   0x....             LDR.N    R3,??DataTable6_7
   \   00000010   0x54CA             STRB     R2,[R1, R3]
    564          	 }
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \                     ??showimage_0: (+1)
   \   00000014   0x297F             CMP      R1,#+127
   \   00000016   0xD3F9             BCC.N    ??showimage_1
    565          	 for (J = 0; J < 8; J++)
   \   00000018   0x2400             MOVS     R4,#+0
   \   0000001A   0xE000             B.N      ??showimage_2
   \                     ??showimage_3: (+1)
   \   0000001C   0x1C64             ADDS     R4,R4,#+1
   \                     ??showimage_2: (+1)
   \   0000001E   0x2C08             CMP      R4,#+8
   \   00000020   0xD22D             BCS.N    ??showimage_4
    566          	 {
    567          		 OLED_WrCmd(0xb0 + 7 - J);
   \   00000022   0xF1D4 0x00B7      RSBS     R0,R4,#+183
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       OLED_WrCmd
    568          		 OLED_WrCmd(0x00);
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       OLED_WrCmd
    569          		 OLED_WrCmd(0x10);
   \   00000032   0x2010             MOVS     R0,#+16
   \   00000034   0x.... 0x....      BL       OLED_WrCmd
    570          		 for (I = 1; I < 126; I++)
   \   00000038   0x2501             MOVS     R5,#+1
   \   0000003A   0xE004             B.N      ??showimage_5
    571          		 {
    572          			 if ( (l[I] / 32) == J )
    573          				 OLED_WrDat((1 << (7 - ((l[I] % 32) / 4))),0);
    574          			 else OLED_WrDat(0x00,0);
   \                     ??showimage_6: (+1)
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      BL       OLED_WrDat
   \                     ??showimage_7: (+1)
   \   00000044   0x1C6D             ADDS     R5,R5,#+1
   \                     ??showimage_5: (+1)
   \   00000046   0x2D7E             CMP      R5,#+126
   \   00000048   0xD2E8             BCS.N    ??showimage_3
   \   0000004A   0x....             LDR.N    R0,??DataTable6_7
   \   0000004C   0x5C28             LDRB     R0,[R5, R0]
   \   0000004E   0x2120             MOVS     R1,#+32
   \   00000050   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000054   0x42A0             CMP      R0,R4
   \   00000056   0xD1F1             BNE.N    ??showimage_6
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x....             LDR.N    R2,??DataTable6_7
   \   0000005E   0x5CAA             LDRB     R2,[R5, R2]
   \   00000060   0x2320             MOVS     R3,#+32
   \   00000062   0xFB92 0xF6F3      SDIV     R6,R2,R3
   \   00000066   0xFB06 0x2613      MLS      R6,R6,R3,R2
   \   0000006A   0x2204             MOVS     R2,#+4
   \   0000006C   0xFB96 0xF2F2      SDIV     R2,R6,R2
   \   00000070   0xF1D2 0x0207      RSBS     R2,R2,#+7
   \   00000074   0x4090             LSLS     R0,R0,R2
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x.... 0x....      BL       OLED_WrDat
   \   0000007C   0xE7E2             B.N      ??showimage_7
    575          		 }
    576          	 }
    577           }
   \                     ??showimage_4: (+1)
   \   0000007E   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??l:
   \   00000000                      DS8 140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     reverse

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     F6x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x88E368F1         DC32     0x88e368f1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x3EE4F8B5         DC32     0x3ee4f8b5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x47C35000         DC32     0x47c35000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0xB727C5AC         DC32     0xb727c5ac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     ??l

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OLED_DLY_ms
      16   OLED_Fill
        16   -> OLED_WrCmd
        16   -> OLED_WrDat
       8   OLED_Init
         8   -> LPLD_GPIO_Output_b
         8   -> OLED_DLY_ms
         8   -> OLED_Fill
         8   -> OLED_Set_Pos
         8   -> SetAddressingMode
         8   -> SetContrastControl
         8   -> SetStartLine
         8   -> Set_Charge_Pump
         8   -> Set_Common_Config
         8   -> Set_Common_Remap
         8   -> Set_Display_Clock
         8   -> Set_Display_Offset
         8   -> Set_Display_On_Off
         8   -> Set_Entire_Display
         8   -> Set_Inverse_Display
         8   -> Set_Multiplex_Ratio
         8   -> Set_Precharge_Period
         8   -> Set_Segment_Remap
         8   -> Set_VCOMH
      16   OLED_P6x8Char
        16   -> OLED_WrDat
      32   OLED_P6x8Str
        32   -> OLED_Set_Pos
        32   -> OLED_WrDat
      16   OLED_PrintValueC
        16   -> OLED_P6x8Char
        16   -> OLED_Set_Pos
      32   OLED_PrintValueF
        32   -> OLED_P6x8Char
        32   -> OLED_PrintValueFP
        32   -> OLED_Set_Pos
        32   -> __aeabi_d2f
        32   -> __aeabi_dadd
        32   -> __aeabi_f2d
        32   -> __aeabi_f2iz
        32   -> __aeabi_fmul
        32   -> __aeabi_fsub
        32   -> __aeabi_i2f
        32 __aeabi_cfcmple
        32 __aeabi_cfrcmple
      24   OLED_PrintValueFP
        24   -> OLED_P6x8Char
      32   OLED_PrintValueI
        32   -> OLED_P6x8Char
        32   -> OLED_Set_Pos
       8   OLED_Set_Pos
         8   -> OLED_WrCmd
      16   OLED_WrCmd
        16   -> LPLD_GPIO_Output_b
      16   OLED_WrDat
        16   -> LPLD_GPIO_Output_b
       8   SetAddressingMode
         8   -> OLED_WrCmd
      16   SetColumnAddress
        16   -> OLED_WrCmd
       8   SetContrastControl
         8   -> OLED_WrCmd
      16   SetPageAddress
        16   -> OLED_WrCmd
       8   SetStartColumn
         8   -> OLED_WrCmd
       8   SetStartLine
         8   -> OLED_WrCmd
       8   SetStartPage
         8   -> OLED_WrCmd
       8   Set_Charge_Pump
         8   -> OLED_WrCmd
       8   Set_Common_Config
         8   -> OLED_WrCmd
       8   Set_Common_Remap
         8   -> OLED_WrCmd
       8   Set_Display_Clock
         8   -> OLED_WrCmd
       8   Set_Display_Offset
         8   -> OLED_WrCmd
       8   Set_Display_On_Off
         8   -> OLED_WrCmd
       8   Set_Entire_Display
         8   -> OLED_WrCmd
       8   Set_Inverse_Display
         8   -> OLED_WrCmd
       8   Set_Multiplex_Ratio
         8   -> OLED_WrCmd
       8   Set_NOP
         8   -> OLED_WrCmd
       8   Set_Precharge_Period
         8   -> OLED_WrCmd
       8   Set_Segment_Remap
         8   -> OLED_WrCmd
       8   Set_VCOMH
         8   -> OLED_WrCmd
      16   showimage
        16   -> OLED_WrCmd
        16   -> OLED_WrDat


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
     552  F6x8
      24  OLED_DLY_ms
      62  OLED_Fill
     210  OLED_Init
      68  OLED_P6x8Char
     152  OLED_P6x8Str
      94  OLED_PrintValueC
     518  OLED_PrintValueF
     196  OLED_PrintValueFP
     210  OLED_PrintValueI
      38  OLED_Set_Pos
     102  OLED_WrCmd
     114  OLED_WrDat
      20  SetAddressingMode
      30  SetColumnAddress
      20  SetContrastControl
      30  SetPageAddress
      40  SetStartColumn
      14  SetStartLine
      14  SetStartPage
      22  Set_Charge_Pump
      22  Set_Common_Config
      14  Set_Common_Remap
      20  Set_Display_Clock
      20  Set_Display_Offset
      14  Set_Display_On_Off
      14  Set_Entire_Display
      14  Set_Inverse_Display
      20  Set_Multiplex_Ratio
      10  Set_NOP
      20  Set_Precharge_Period
      14  Set_Segment_Remap
      20  Set_VCOMH
     140  l
       1  reverse
     128  showimage

 
   141 bytes in section .bss
   552 bytes in section .rodata
 2 340 bytes in section .text
 
 2 340 bytes of CODE  memory
   552 bytes of CONST memory
   141 bytes of DATA  memory

Errors: none
Warnings: none

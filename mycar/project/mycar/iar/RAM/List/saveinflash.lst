###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        14/Jul/2016  12:00:47
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\app\saveinflash.c
#    Command line =  
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\app\saveinflash.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\RAM\List\
#        -lB
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\RAM\List\
#        -o
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\RAM\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        E:\IAR\anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\app\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\CPU\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\common\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\LPLD\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\LPLD\HW\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\FatFs\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\FatFs\option\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\USB\common\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\USB\driver\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\USB\descriptor\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\USB\class\
#        -Ol -I E:\IAR\anzhuang\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\RAM\List\saveinflash.lst
#    Object file  =  
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\RAM\Obj\saveinflash.o
#
###############################################################################

F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\app\saveinflash.c
      1          #include "saveinflash.h"
      2          #define FLASH_SAVE_SECTOR   (127)  //储存扇区
      3          #define FLASH_SAVE_ADDR     (FLASH_SAVE_SECTOR*2048)  
      4          #define DATA_SIZE      (49)

   \                                 In section .bss, align 4
      5          uint8 read_buffer[DATA_SIZE];  //定义读缓冲区
   \                     read_buffer:
   \   00000000                      DS8 52

   \                                 In section .bss, align 4
      6          uint8 write_buffer[DATA_SIZE]; //定义写缓冲区
   \                     write_buffer:
   \   00000000                      DS8 52

   \                                 In section .data, align 4
      7          uint8 *ptr=(uint8*)FLASH_SAVE_ADDR;
   \                     ptr:
   \   00000000   0x0003F800         DC32 3F800H
      8          

   \                                 In section .data, align 4
      9          float *Save_Data[12]={&PID_Speed.P,&PID_Speed.I,&PID_Speed.D,&PID_Turn.P,&PID_Turn.D,&PID_Turn.I,&Fuzzy_Kp,&Fuzzy_Kd,&Correct_Err,&K_CrossRoad,&SetSpeed,&P_CrossRoad};
   \                     Save_Data:
   \   00000000   0x........         DC32 PID_Speed, PID_Speed + 8H, PID_Speed + 10H, PID_Turn
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 PID_Turn + 10H, PID_Turn + 8H, Fuzzy_Kp, Fuzzy_Kd, Correct_Err
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000024   0x........         DC32 K_CrossRoad, SetSpeed, P_CrossRoad
   \              0x........   
   \              0x........   

   \                                 In section .text, align 2, keep-with-next
     10          void DebugData_Init()
     11          {
   \                     DebugData_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     12          
     13            LPLD_Flash_Init();
   \   00000002   0x.... 0x....      BL       LPLD_Flash_Init
     14            delay_flash();
   \   00000006   0x.... 0x....      BL       delay_flash
     15          
     16            if(*(ptr)!=0xa3)  //没有数据保存
   \   0000000A   0x....             LDR.N    R0,??DataTable2
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x28A3             CMP      R0,#+163
   \   00000012   0xD002             BEQ.N    ??DebugData_Init_0
     17            {
     18              
     19              DebugData_Save();
   \   00000014   0x.... 0x....      BL       DebugData_Save
   \   00000018   0xE001             B.N      ??DebugData_Init_1
     20              
     21            
     22            }
     23            else
     24            {
     25              DebugData_Read();
   \                     ??DebugData_Init_0: (+1)
   \   0000001A   0x.... 0x....      BL       DebugData_Read
     26            }
     27          
     28          
     29          
     30          
     31          }
   \                     ??DebugData_Init_1: (+1)
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
     32          
     33          
     34          

   \                                 In section .text, align 2, keep-with-next
     35          void DebugData_Save()
     36          {
   \                     DebugData_Save: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     37            uint8 i;
     38            write_buffer[0]=0xa3;
   \   00000002   0x20A3             MOVS     R0,#+163
   \   00000004   0x....             LDR.N    R1,??DataTable2_1
   \   00000006   0x7008             STRB     R0,[R1, #+0]
     39            for(i=0;i<12;i++)
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xE028             B.N      ??DebugData_Save_0
     40            {
     41              write_buffer[4*i+1]=BYTE0(*Save_Data[i]);
   \                     ??DebugData_Save_1: (+1)
   \   0000000C   0x....             LDR.N    R1,??DataTable2_2
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000014   0x7809             LDRB     R1,[R1, #+0]
   \   00000016   0x....             LDR.N    R2,??DataTable2_1
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   0000001E   0x7051             STRB     R1,[R2, #+1]
     42              write_buffer[4*i+2]=BYTE1(*Save_Data[i]);
   \   00000020   0x....             LDR.N    R1,??DataTable2_2
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000028   0x7849             LDRB     R1,[R1, #+1]
   \   0000002A   0x....             LDR.N    R2,??DataTable2_1
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000032   0x7091             STRB     R1,[R2, #+2]
     43              write_buffer[4*i+3]=BYTE2(*Save_Data[i]);
   \   00000034   0x....             LDR.N    R1,??DataTable2_2
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000003C   0x7889             LDRB     R1,[R1, #+2]
   \   0000003E   0x....             LDR.N    R2,??DataTable2_1
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000046   0x70D1             STRB     R1,[R2, #+3]
     44              write_buffer[4*i+4]=BYTE3(*Save_Data[i]);
   \   00000048   0x....             LDR.N    R1,??DataTable2_2
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000050   0x78C9             LDRB     R1,[R1, #+3]
   \   00000052   0x....             LDR.N    R2,??DataTable2_1
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   0000005A   0x7111             STRB     R1,[R2, #+4]
     45              
     46          
     47            }
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \                     ??DebugData_Save_0: (+1)
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x280C             CMP      R0,#+12
   \   00000062   0xDBD3             BLT.N    ??DebugData_Save_1
     48          
     49            DisableInterrupts;  
   \   00000064   0xB672             CPSID    I
     50            LPLD_Flash_SectorErase(FLASH_SAVE_ADDR);
   \   00000066   0xF45F 0x307E      MOVS     R0,#+260096
   \   0000006A   0x.... 0x....      BL       LPLD_Flash_SectorErase
     51            EnableInterrupts; 
   \   0000006E   0xB662             CPSIE    I
     52            DisableInterrupts;  
   \   00000070   0xB672             CPSID    I
     53            LPLD_Flash_ByteProgram((uint32)FLASH_SAVE_ADDR, (uint32*)write_buffer, DATA_SIZE);
   \   00000072   0x2231             MOVS     R2,#+49
   \   00000074   0x....             LDR.N    R1,??DataTable2_1
   \   00000076   0xF45F 0x307E      MOVS     R0,#+260096
   \   0000007A   0x.... 0x....      BL       LPLD_Flash_ByteProgram
     54            EnableInterrupts;
   \   0000007E   0xB662             CPSIE    I
     55            delay_flash();
   \   00000080   0x.... 0x....      BL       delay_flash
     56            
     57          
     58          }
   \   00000084   0xBD01             POP      {R0,PC}          ;; return
     59          
     60          
     61          
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void DebugData_Read()
     64          {
     65            uint8 i;
     66          
     67          
     68            for(i=0;i<12;i++)
   \                     DebugData_Read: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE02C             B.N      ??DebugData_Read_0
     69            {
     70              BYTE0(*Save_Data[i])=*(ptr + 4*i+1);
   \                     ??DebugData_Read_1: (+1)
   \   00000004   0x....             LDR.N    R1,??DataTable2
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000000E   0x7849             LDRB     R1,[R1, #+1]
   \   00000010   0x....             LDR.N    R2,??DataTable2_2
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000018   0x7011             STRB     R1,[R2, #+0]
     71              BYTE1(*Save_Data[i])=*(ptr + 4*i+2);
   \   0000001A   0x....             LDR.N    R1,??DataTable2
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000024   0x7889             LDRB     R1,[R1, #+2]
   \   00000026   0x....             LDR.N    R2,??DataTable2_2
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000002E   0x7051             STRB     R1,[R2, #+1]
     72              BYTE2(*Save_Data[i])=*(ptr + 4*i+3);
   \   00000030   0x....             LDR.N    R1,??DataTable2
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000003A   0x78C9             LDRB     R1,[R1, #+3]
   \   0000003C   0x....             LDR.N    R2,??DataTable2_2
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000044   0x7091             STRB     R1,[R2, #+2]
     73              BYTE3(*Save_Data[i])=*(ptr + 4*i+4);
   \   00000046   0x....             LDR.N    R1,??DataTable2
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000050   0x7909             LDRB     R1,[R1, #+4]
   \   00000052   0x....             LDR.N    R2,??DataTable2_2
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000005A   0x70D1             STRB     R1,[R2, #+3]
     74            }
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \                     ??DebugData_Read_0: (+1)
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x280C             CMP      R0,#+12
   \   00000062   0xDBCF             BLT.N    ??DebugData_Read_1
     75          
     76          
     77          }
   \   00000064   0x4770             BX       LR               ;; return
     78          
     79          

   \                                 In section .text, align 4, keep-with-next
     80          void delay_flash()
     81          {
     82            uint16 i, n;
     83            for(i=0;i<30000;i++)
   \                     delay_flash: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE005             B.N      ??delay_flash_0
     84            {
     85              for(n=0;n<200;n++)
     86              {
     87                asm("nop");
   \                     ??delay_flash_1: (+1)
   \   00000004   0xBF00             nop
     88              }
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??delay_flash_2: (+1)
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x29C8             CMP      R1,#+200
   \   0000000C   0xDBFA             BLT.N    ??delay_flash_1
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??delay_flash_0: (+1)
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0xF247 0x5130      MOVW     R1,#+30000
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xDA01             BGE.N    ??delay_flash_3
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xE7F4             B.N      ??delay_flash_2
     89            }
     90          }
   \                     ??delay_flash_3: (+1)
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ptr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     write_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     Save_Data

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DebugData_Init
         8   -> DebugData_Read
         8   -> DebugData_Save
         8   -> LPLD_Flash_Init
         8   -> delay_flash
       0   DebugData_Read
       8   DebugData_Save
         8   -> LPLD_Flash_ByteProgram
         8   -> LPLD_Flash_SectorErase
         8   -> delay_flash
       0   delay_flash


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
      32  DebugData_Init
     102  DebugData_Read
     134  DebugData_Save
      48  Save_Data
      32  delay_flash
       4  ptr
      52  read_buffer
      52  write_buffer

 
 104 bytes in section .bss
  52 bytes in section .data
 312 bytes in section .text
 
 312 bytes of CODE memory
 156 bytes of DATA memory

Errors: none
Warnings: none

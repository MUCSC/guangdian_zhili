###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        13/Apr/2017  20:30:51
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\app\eeprom.c
#    Command line =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\app\eeprom.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\List\
#        -lB
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\List\
#        -o
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\app\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\class\
#        -Ol -I "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\List\eeprom.lst
#    Object file  =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\Obj\eeprom.o
#
###############################################################################

C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\app\eeprom.c
      1          #include "include.h"
      2          uint8 Next_Valid_Block=0;//现在数据所在的块，一共1024/BLOCK_SIZE块
      3          void EEPROM_init()
      4          {
      5            int i;
      6            uint8 temp;
      7            uint8 find=0;
      8            flash_init();
      9            temp=flash_read(SECTOR_NUM,0,uint8);
     10            DELAY_MS(100);
     11            if(temp!=0xaa)//说明该该扇区没有存储数据
     12            {
     13               flash_erase_sector(SECTOR_NUM);                     //擦除扇区
     14               Next_Valid_Block=0;
     15               EEPROM_Save();
     16            }
     17            else
     18            { 
     19              Next_Valid_Block=0;
     20              for(i=(1024/BLOCK_SIZE)-1;i>=0;i--)
     21              {
     22                temp=flash_read(SECTOR_NUM,i*BLOCK_SIZE,uint8);
     23                if(temp==0xaa)  //说明该该扇区有存储数据
     24                {
     25                  Next_Valid_Block=i+1;    //找到下一块没有存储的地址
     26                  find=1;
     27                  break;
     28                }
     29              }
     30              if(find==1)
     31              {
     32                EEPROM_Read();
     33              } 
     34            }
     35          }
     36          
     37          void EEPROM_Save()
     38          {
     39            uint8 i,addr=0;
     40            uint8 buff[60]={0};
     41            buff[0]=0xaa;    //这两个用来注明该块已经有数据了
     42            buff[1]=(uint8)(Next_Valid_Block%16+1);
     43            addr=2;
     44            for(i=0;i<10;i++)
     45            {    
     46              buff[addr]=BYTE0(*Control_Para[i]);
     47              addr++;
     48              buff[addr]=BYTE1(*Control_Para[i]);
     49              addr++;
     50              buff[addr]=BYTE2(*Control_Para[i]);
     51              addr++;
     52              buff[addr]=BYTE3(*Control_Para[i]);
     53              addr++;
     54            }
     55             buff[addr]=BYTE0(Acc_Offset);
     56             addr++;
     57             buff[addr]=BYTE1(Acc_Offset);
     58             addr++;
     59             buff[addr]=Light_Tower_Index;
     60             addr++;
     61             buff[addr]=Set_Angle;
     62             addr++;
     63             buff[addr]=Threshold;
     64             addr++;
     65             buff[addr]=(uint8)((Hill_Slow_Ratio+0.0001)*100);
     66             addr++;
     67             buff[addr]=Strong_Turn_Angle;
     68             addr++;
     69             buff[addr]=Strong_Turn_Speed;
     70             addr++;
     71             buff[addr]=CCD_Offset;
     72             addr++;
     73             buff[addr]=Barri_Turn_Angle;
     74             addr++;
     75             buff[addr]=Barri_Turn_Speed;
     76             addr++;
     77             buff[addr]=RoadTypeSwitch;
     78             addr++;
     79             
     80             
     81             
     82             if(Next_Valid_Block<1024/BLOCK_SIZE) //16
     83             {
     84               flash_write_buf(SECTOR_NUM,Next_Valid_Block*BLOCK_SIZE,sizeof(buff),buff);
     85               if(flash_read(SECTOR_NUM,Next_Valid_Block*BLOCK_SIZE,uint8)!=0xaa)
     86               {
     87                 uint32 temp=*(uint32 *)buff;
     88                 flash_write(SECTOR_NUM,Next_Valid_Block*BLOCK_SIZE,temp);
     89               }
     90               Next_Valid_Block++;
     91             }
     92             else //没有新的空间了
     93             {
     94               flash_erase_sector(SECTOR_NUM);                     //擦除扇区
     95               Next_Valid_Block=0;
     96               flash_write_buf(SECTOR_NUM,Next_Valid_Block*BLOCK_SIZE,sizeof(buff),buff);
     97               if(flash_read(SECTOR_NUM,Next_Valid_Block*BLOCK_SIZE,uint8)!=0xaa)
     98               {
     99                 uint32 temp=*(uint32 *)buff;
    100                 flash_write(SECTOR_NUM,Next_Valid_Block*BLOCK_SIZE,temp);
    101               }
    102               Next_Valid_Block++;
    103             }
    104          }
    105          void EEPROM_Read()
    106          {
    107              uint8 i=0,addr=2;
    108              float temp;
    109             for(i=0;i<10;i++)
    110            {
    111                 BYTE0(temp)=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    112                 addr++;
    113                 BYTE1(temp)=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    114                 addr++;
    115                 BYTE2(temp)=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    116                 addr++;
    117                 BYTE3(temp)=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    118                 addr++;
    119                 *Control_Para[i]=temp;
    120             }
    121             BYTE0(Acc_Offset)=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    122             addr++;
    123             BYTE1(Acc_Offset)=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    124             addr++;
    125             Light_Tower_Index=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    126             addr++;
    127             Set_Angle=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    128             addr++;
    129             Threshold=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    130             addr++;
    131             Hill_Slow_Ratio=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8)*1.0/100.0;
    132             addr++;
    133             Strong_Turn_Angle=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    134             addr++;
    135             Strong_Turn_Speed=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    136             addr++;
    137             CCD_Offset=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    138             addr++;
    139             
    140             Barri_Turn_Angle=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    141             addr++;
    142             Barri_Turn_Speed=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    143             addr++;
    144             RoadTypeSwitch=flash_read(SECTOR_NUM,(Next_Valid_Block-1)*BLOCK_SIZE+addr,uint8);
    145             addr++;
    146             
    147          
    148          
    149          }

Errors: 25
Warnings: 13

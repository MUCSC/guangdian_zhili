###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        13/Apr/2017  22:11:34
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\app\oled.c
#    Command line =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\app\oled.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\List\
#        -lB
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\List\
#        -o
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\app\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\class\
#        -Ol -I "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\List\oled.lst
#    Object file  =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\Obj\oled.o
#
###############################################################################

C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\app\oled.c
      1          #include "include.h"
      2          //OLED显示屏
      3          #define OLED_RST(x)  gpio_set(PTA14,x)
      4          #define OLED_DC(x)   gpio_set(PTA15,x)
      5          #define OLED_D0(x)   gpio_set(PTA16,x)
      6          #define OLED_D1(x)   gpio_set(PTA17,x)
      7          
      8          
      9          uint8  reverse=0;
     10          /*定义ASCII码表*/
     11          const unsigned char F6x8[][6] =
     12          {
     13          	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
     14          	{ 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
     15          	{ 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
     16          	{ 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
     17          	{ 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
     18          	{ 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
     19          	{ 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
     20          	{ 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
     21          	{ 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
     22          	{ 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
     23          	{ 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
     24          	{ 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
     25          	{ 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
     26          	{ 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
     27          	{ 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
     28          	{ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
     29          	{ 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
     30          	{ 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
     31          	{ 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
     32          	{ 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
     33          	{ 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
     34          	{ 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
     35          	{ 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
     36          	{ 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
     37          	{ 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
     38          	{ 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
     39          	{ 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
     40          	{ 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
     41          	{ 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
     42          	{ 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
     43          	{ 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
     44          	{ 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
     45          	{ 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
     46          	{ 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
     47          	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
     48          	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
     49          	{ 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
     50          	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
     51          	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
     52          	{ 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
     53          	{ 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
     54          	{ 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
     55          	{ 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
     56          	{ 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
     57          	{ 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
     58          	{ 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
     59          	{ 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
     60          	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
     61          	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
     62          	{ 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
     63          	{ 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
     64          	{ 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
     65          	{ 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
     66          	{ 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
     67          	{ 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
     68          	{ 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
     69          	{ 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
     70          	{ 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
     71          	{ 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
     72          	{ 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [ 91
     73          	{ 0x00, 0x02, 0x04 ,0x08, 0x10, 0x20 },    // \92
     74          	{ 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
     75          	{ 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
     76          	{ 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
     77          	{ 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
     78          	{ 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
     79          	{ 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
     80          	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
     81          	{ 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
     82          	{ 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
     83          	{ 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
     84          	{ 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
     85          	{ 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
     86          	{ 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
     87          	{ 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
     88          	{ 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
     89          	{ 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
     90          	{ 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
     91          	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
     92          	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
     93          	{ 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
     94          	{ 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
     95          	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
     96          	{ 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
     97          	{ 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
     98          	{ 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
     99          	{ 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
    100          	{ 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
    101          	{ 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
    102          	{ 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
    103          	{ 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
    104          	{ 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
    105          };
    106          
    107          //写数据函数
    108          void OLED_WrDat(unsigned char data,unsigned char revs)   
    109          {
    110          	unsigned char i = 8;
    111                  PTA15_OUT=1;
    112          	PTA16_OUT=0; 
    113                  if(revs) data=~data;
    114          	while (i--)
    115          	{
    116                      if (data & 0x80)
    117                      {
    118                       PTA17_OUT=1;
    119                      }
    120                      else
    121                      {
    122                       PTA17_OUT=0;
    123                      }
    124                       PTA16_OUT=1;
    125                      asm("nop");
    126                       PTA16_OUT=0; 
    127                      data <<= 1;    
    128          	}
    129          }
    130          //写入命令函数
    131          void OLED_WrCmd(unsigned char cmd) 
    132          {
    133          	unsigned char i = 8;
    134          	//LED_CS = 0;
    135                  PTA15_OUT=0;
    136          	PTA16_OUT=0;
    137          	while (i--)
    138          	{
    139          		if (cmd & 0x80)
    140          		{
    141          			PTA17_OUT=1;
    142          		}
    143          		else
    144          		{
    145          			PTA17_OUT=0;
    146          		}
    147          		PTA16_OUT=1;
    148                          asm("nop");
    149                          PTA16_OUT=0;
    150          		cmd <<= 1;   
    151          	} 	
    152          	//LED_CS = 1;
    153          }
    154          //设置显示坐标位置
    155          void OLED_Set_Pos(unsigned char x, unsigned char y)
    156          { 
    157          	OLED_WrCmd(0xb0+y);
    158          	OLED_WrCmd(((x&0xf0)>>4)|0x10);
    159          	OLED_WrCmd((x&0x0f)|0x00); 
    160          }
    161          //OLED填充
    162          void OLED_Fill(unsigned char bmp_data)
    163          {
    164          	unsigned char y,x;
    165          	
    166          	for(y=0;y<8;y++)
    167          	{
    168          		OLED_WrCmd(0xb0+y);   //0xb0+0~7表示页0~页7?
    169          		OLED_WrCmd(0x00);       //0x00+0~16表示将128列分成16组其地址在某组中的第几列
    170          		OLED_WrCmd(0x10);      //0x10+0~16表示将128列分成16组其地址所在第几组
    171          		for(x=0;x<128;x++)
    172          	        OLED_WrDat(bmp_data,0);
    173          	}
    174          }
    175          //延时函数
    176          void OLED_DLY_ms(unsigned int ms)
    177          {                         
    178            uint16 a;
    179            while(ms)
    180            {
    181              a=6675;
    182              while(a--);
    183              ms--;
    184            }
    185            return;
    186          }
    187          void SetStartColumn(unsigned char d)
    188          {
    189          	OLED_WrCmd(0x00+d%16);	// Set Lower Column Start Address for Page Addressing Mode
    190          							// Default => 0x00
    191          	OLED_WrCmd(0x10+d/16);	// Set Higher Column Start Address for Page Addressing Mode
    192          							// Default => 0x10
    193          }
    194          void SetAddressingMode(unsigned char d)
    195          {
    196          	OLED_WrCmd(0x20);			// Set Memory Addressing Mode
    197          	OLED_WrCmd(d);			// Default => 0x02
    198          							// 0x00 => Horizontal Addressing Mode
    199          							// 0x01 => Vertical Addressing Mode
    200          							// 0x02 => Page Addressing Mode
    201          }
    202          
    203          void SetColumnAddress(unsigned char a, unsigned char b)
    204          {
    205          	OLED_WrCmd(0x21);			// Set Column Address
    206          	OLED_WrCmd(a);			// Default => 0x00 (Column Start Address)
    207          	OLED_WrCmd(b);			// Default => 0x7F (Column End Address)
    208          }
    209          
    210          void SetPageAddress(unsigned char a, unsigned char b)
    211          {
    212          	OLED_WrCmd(0x22);			// Set Page Address
    213          	OLED_WrCmd(a);			// Default => 0x00 (Page Start Address)
    214          	OLED_WrCmd(b);			// Default => 0x07 (Page End Address)
    215          }
    216          
    217          void SetStartLine(unsigned char d)
    218          {
    219          	OLED_WrCmd(0x40|d);		// Set Display Start Line
    220          							// Default => 0x40 (0x00)
    221          }
    222          
    223          void SetContrastControl(unsigned char d)
    224          {
    225          	OLED_WrCmd(0x81);			// Set Contrast Control
    226          	OLED_WrCmd(d);			// Default => 0x7F
    227          }
    228          
    229          void Set_Charge_Pump(unsigned char d)
    230          {
    231          	OLED_WrCmd(0x8D);			// Set Charge Pump
    232          	OLED_WrCmd(0x10|d);		// Default => 0x10
    233          							// 0x10 (0x00) => Disable Charge Pump
    234          							// 0x14 (0x04) => Enable Charge Pump
    235          }
    236          
    237          void Set_Segment_Remap(unsigned char d)
    238          {
    239          	OLED_WrCmd(0xA0|d);		// Set Segment Re-Map
    240          							// Default => 0xA0
    241          							// 0xA0 (0x00) => Column Address 0 Mapped to SEG0
    242          							// 0xA1 (0x01) => Column Address 0 Mapped to SEG127
    243          }
    244          
    245          void Set_Entire_Display(unsigned char d)
    246          {
    247          	OLED_WrCmd(0xA4|d);		// Set Entire Display On / Off
    248          							// Default => 0xA4
    249          							// 0xA4 (0x00) => Normal Display
    250          							// 0xA5 (0x01) => Entire Display On
    251          }
    252          
    253          void Set_Inverse_Display(unsigned char d)
    254          {
    255          	OLED_WrCmd(0xA6|d);		// Set Inverse Display On/Off
    256          							// Default => 0xA6
    257          							// 0xA6 (0x00) => Normal Display
    258          							// 0xA7 (0x01) => Inverse Display On
    259          }
    260          
    261          void Set_Multiplex_Ratio(unsigned char d)
    262          {
    263          	OLED_WrCmd(0xA8);			// Set Multiplex Ratio
    264          	OLED_WrCmd(d);			// Default => 0x3F (1/64 Duty)
    265          }
    266          
    267          void Set_Display_On_Off(unsigned char d)
    268          {
    269          	OLED_WrCmd(0xAE|d);		// Set Display On/Off
    270          							// Default => 0xAE
    271          							// 0xAE (0x00) => Display Off
    272          							// 0xAF (0x01) => Display On
    273          }
    274          
    275          void SetStartPage(unsigned char d)
    276          {
    277          	OLED_WrCmd(0xB0|d);		// Set Page Start Address for Page Addressing Mode
    278          							// Default => 0xB0 (0x00)
    279          }
    280          
    281          void Set_Common_Remap(unsigned char d)
    282          {
    283          	OLED_WrCmd(0xC0|d);		// Set COM Output Scan Direction
    284          							// Default => 0xC0
    285          							// 0xC0 (0x00) => Scan from COM0 to 63
    286          							// 0xC8 (0x08) => Scan from COM63 to 0
    287          }
    288          
    289          void Set_Display_Offset(unsigned char d)
    290          {
    291          	OLED_WrCmd(0xD3);			// Set Display Offset
    292          	OLED_WrCmd(d);			// Default => 0x00
    293          }
    294          
    295          void Set_Display_Clock(unsigned char d)
    296          {
    297          	OLED_WrCmd(0xD5);			// Set Display Clock Divide Ratio / Oscillator Frequency
    298          	OLED_WrCmd(d);			// Default => 0x80
    299          							// D[3:0] => Display Clock Divider
    300          							// D[7:4] => Oscillator Frequency
    301          }
    302          
    303          void Set_Precharge_Period(unsigned char d)
    304          {
    305          	OLED_WrCmd(0xD9);			// Set Pre-Charge Period
    306          	OLED_WrCmd(d);			// Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
    307          							// D[3:0] => Phase 1 Period in 1~15 Display Clocks
    308          							// D[7:4] => Phase 2 Period in 1~15 Display Clocks
    309          }
    310          
    311          void Set_Common_Config(unsigned char d)
    312          {
    313          	OLED_WrCmd(0xDA);			// Set COM Pins Hardware Configuration
    314          	OLED_WrCmd(0x02|d);		// Default => 0x12 (0x10)
    315          							// Alternative COM Pin Configuration
    316          							// Disable COM Left/Right Re-Map
    317          }
    318          
    319          void Set_VCOMH(unsigned char d)
    320          {
    321          	OLED_WrCmd(0xDB);			// Set VCOMH Deselect Level
    322          	OLED_WrCmd(d);			        // Default => 0x20 (0.77*VCC)
    323          }
    324          
    325          void Set_NOP(void)
    326          {
    327          	OLED_WrCmd(0xE3);			// Command for No Operation
    328          }
    329          void OLED_Init(void)        
    330          {  
    331                  OLED_DC(0);		
    332          	OLED_D1(0);
    333                  OLED_D0(0);		
    334          	OLED_RST(0);
    335                  OLED_DLY_ms(50);
    336          	OLED_D0(1);		
    337          	OLED_RST(0);
    338                  OLED_DLY_ms(50);
    339          	OLED_RST(1);
    340          	Set_Display_On_Off(0x00);	      // Display Off (0x00/0x01)
    341          	Set_Display_Clock(0x80);	      // Set Clock as 100 Frames/Sec
    342          	Set_Multiplex_Ratio(0x3F);	      // 1/64 Duty (0x0F~0x3F)
    343          	Set_Display_Offset(0x00);	      // Shift Mapping RAM Counter (0x00~0x3F)
    344          	SetStartLine(0x00);		      // Set Mapping RAM Display Start Line (0x00~0x3F)
    345          	Set_Charge_Pump(0x04);		      // Enable Embedded DC/DC Converter (0x00/0x04)
    346          	SetAddressingMode(0x02);	      // Set Page Addressing Mode (0x00/0x01/0x02)
    347          	Set_Segment_Remap(0x01);	      // Set SEG/Column Mapping     0x00左右反置 0x01正常
    348          	Set_Common_Remap(0x08);	              // Set COM/Row Scan Direction 0x00上下反置 0x08正常
    349          	Set_Common_Config(0x10);	      // Set Sequential Configuration (0x00/0x10)
    350          	SetContrastControl(0xCF);             // Set SEG Output Current
    351          	Set_Precharge_Period(0xF1);	      // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
    352          	Set_VCOMH(0x40);		      // Set VCOM Deselect Level
    353          	Set_Entire_Display(0x00);	      // Disable Entire Display On (0x00/0x01)
    354          	Set_Inverse_Display(0x00);	      // Disable Inverse Display On (0x00/0x01)  
    355          	Set_Display_On_Off(0x01);	      // Display On (0x00/0x01)
    356          	OLED_Fill(0x00);                      //初始清屏
    357          	OLED_Set_Pos(0,0); 	
    358          } 
    359          //显示一个6x8标准ASCII字符
    360          void OLED_P6x8Char(unsigned char ch)
    361          {
    362          	 unsigned char c=0,i=0,rs=0;       
    363          	c =ch-32;
    364                   if(reverse&&c) rs=1;
    365          	for(i=0;i<6;i++)
    366          	{     
    367                        OLED_WrDat(F6x8[c][i],rs);  
    368          	}
    369          }
    370          //功能描述：写入一组6x8标准ASCII字符串 
    371          void OLED_P6x8Str(unsigned char x,unsigned char y,char ch[])
    372          {
    373          	unsigned char c=0,i=0,j=0,rs=0;      
    374          	while (ch[j]!='\0')
    375          	{    
    376          		c =ch[j]-32;            
    377                          if(reverse&&c) rs=1;  //是否反转显示
    378                          else rs=0;               
    379          		if(x>126)
    380          		{
    381          			x=0;
    382          			y++;
    383          		}
    384          		OLED_Set_Pos(x,y);    
    385          		for(i=0;i<6;i++)
    386          		{     
    387                            OLED_WrDat(F6x8[c][i],rs);
    388          		}
    389          		x+=6;
    390          		j++;
    391          	}
    392          }
    393          //将一个char型数转换成3位数进行显示
    394          void OLED_PrintValueC(unsigned char x, unsigned char y, int data)
    395          {
    396                  OLED_Set_Pos(x,y); 
    397          	unsigned char i,j,k;
    398          	if(data<0)
    399          	{
    400          		OLED_P6x8Char('-');
    401          		data = - data;	
    402          	}
    403          	else
    404          	{
    405          		OLED_P6x8Char('+');
    406          	}
    407          	i = data/100;
    408          	j = (data%100)/10;
    409          	k = data%10;
    410          	OLED_P6x8Char(i+48);
    411          	OLED_P6x8Char(j+48);
    412          	OLED_P6x8Char(k+48);		
    413          }
    414          //功能描述：将一个int型数转换成5位数进行显示
    415          void OLED_PrintValueI(unsigned char x, unsigned char y, int data)
    416          {       
    417                  OLED_Set_Pos(x,y); 
    418          	unsigned char i,j,k,l,m,fn=0;  
    419          
    420          	l  = data/10000;
    421          	m= (data%10000)/1000;
    422          	i = (data%1000)/100;
    423          	j = (data%100)/10;
    424          	k = data%10;
    425          	if(data < 0)
    426          	{
    427          		OLED_P6x8Char('-');
    428          		data = - data;	
    429          	}
    430                  if(l)
    431                  {
    432                    OLED_P6x8Char(l+48);
    433                    fn=1;
    434                  }
    435          	if(m||fn)
    436                  {
    437                    OLED_P6x8Char(m+48);
    438                    fn=1;
    439                  }
    440          	if(i||fn)
    441                  {
    442                    OLED_P6x8Char(i+48);
    443                    fn=1;
    444                  }
    445          	if(j||fn)
    446                    OLED_P6x8Char(j+48);
    447          	OLED_P6x8Char(k+48);	
    448          }
    449          //显示unsigned int型
    450           void OLED_PrintValueFP(unsigned int data, unsigned char num)
    451           {     unsigned char m,i,j,k;   	
    452           	OLED_P6x8Char('.');
    453                  
    454          	m= data/1000;
    455          	i = (data%1000)/100;
    456          	j = (data%100)/10;
    457          	k = data%10;
    458          	switch(num)
    459          	{
    460          
    461          		case 1:  	OLED_P6x8Char(k+48);
    462          				break;
    463          		case 2:  	OLED_P6x8Char(j+48);
    464          				OLED_P6x8Char(k+48);
    465          				break;
    466          		case 3:	OLED_P6x8Char(i+48);
    467          				OLED_P6x8Char(j+48);
    468          				OLED_P6x8Char(k+48);
    469          				break;
    470          		case 4: 	OLED_P6x8Char(m+48);
    471          				OLED_P6x8Char(i+48);
    472          				OLED_P6x8Char(j+48);
    473          				OLED_P6x8Char(k+48);
    474          				break;	
    475          	}
    476                  OLED_P6x8Char(' ');     //清空后一位
    477           }
    478          //功能描述：将一个float型数转换成2位整数部分带4位小数和符号的数据并进行显示
    479           void OLED_PrintValueF(unsigned char x, unsigned char y, float data, unsigned char num)
    480           {
    481           	unsigned char l,m,i,j,k;  //wan
    482           	unsigned char Integer_Len = 6; //整数位数         
    483                  
    484                  if(data>0)       
    485                  data=data+0.00001;
    486            	int Integer_Part = (int)data; //整数部分
    487           	long int Float_Part = (long int)((data - (int)data)*100000); //取小数位后5位
    488                  OLED_Set_Pos(x,y); 
    489           	//整数部分显示
    490                   
    491               
    492                  
    493                  if(data<-0.00001)
    494                  OLED_P6x8Char('-'); 
    495          
    496          	if(Integer_Part < 0)Integer_Part = - Integer_Part;  //去掉整数部分负号
    497           	l  = Integer_Part/10000;
    498          	m= (Integer_Part%10000)/1000;
    499          	i = (Integer_Part%1000)/100;
    500          	j = (Integer_Part%100)/10;
    501          	k = Integer_Part%10;
    502                  
    503                  
    504                  
    505                  
    506           	if (l != 0)  //五位
    507           	{
    508                          Integer_Len = 5;
    509           		OLED_P6x8Char(l+48);
    510           		OLED_P6x8Char(m+48);
    511          		OLED_P6x8Char(i+48);
    512          		OLED_P6x8Char(j+48);
    513          		OLED_P6x8Char(k+48);
    514           	}
    515           	else if(m != 0) //四位
    516           	{
    517           		Integer_Len = 4;
    518           		OLED_P6x8Char(m+48);
    519           		OLED_P6x8Char(i+48);
    520          		OLED_P6x8Char(j+48);
    521          		OLED_P6x8Char(k+48);
    522           	}
    523            	else if(i != 0) //三位
    524            	{
    525            		Integer_Len = 3;
    526            	 	OLED_P6x8Char(i+48);
    527           		OLED_P6x8Char(j+48);
    528          		OLED_P6x8Char(k+48);
    529            	}
    530            	else if(j != 0) //两位
    531            	{
    532              		Integer_Len = 2;	
    533            		OLED_P6x8Char(j+48);
    534           		OLED_P6x8Char(k+48);
    535            	}
    536          	else 	
    537          	{
    538          		Integer_Len = 1;
    539          		OLED_P6x8Char(k+48);
    540          	}	
    541                  if(Float_Part < 0)Float_Part = -Float_Part;
    542          	switch(num-Integer_Len)
    543          	{
    544          		case 0:   OLED_P6x8Char(' '); break;
    545          		case 1:  OLED_PrintValueFP((unsigned int)(Float_Part /10000),num-Integer_Len);break;
    546          		case 2:  OLED_PrintValueFP((unsigned int)(Float_Part /1000),num-Integer_Len);break;
    547          		case 3:  OLED_PrintValueFP((unsigned int)(Float_Part /100),num-Integer_Len);break;
    548          		case 4:  OLED_PrintValueFP((unsigned int)(Float_Part/10),num-Integer_Len);break;					
    549          	}
    550           }

Errors: 8
Warnings: 1

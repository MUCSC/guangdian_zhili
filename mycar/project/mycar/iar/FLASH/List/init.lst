###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        13/Apr/2017  22:11:34
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\app\init.c
#    Command line =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\app\init.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\List\
#        -lB
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\List\
#        -o
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\app\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\class\
#        -Ol -I "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\List\init.lst
#    Object file  =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\Obj\init.o
#
###############################################################################

C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\app\init.c
      1          #include "include.h"
      2          void Para_Init();
      3          void GPIO_Init();
      4          void Fix_Offset();
      5          //变量定义

   \                                 In section .bss, align 4
      6          FTM_InitTypeDef ftm_init_struct;
   \                     ftm_init_struct:
   \   00000000                      DS8 28

   \                                 In section .bss, align 4
      7          PIT_InitTypeDef pit_init_struct;
   \                     pit_init_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
      8          GPIO_InitTypeDef gpio_init_struct;
   \                     gpio_init_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
      9          ADC_InitTypeDef  adc_init_struct;
   \                     adc_init_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     10          LPTMR_InitTypeDef lptmr_init_struct;
   \                     lptmr_init_struct:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     11          UART_InitTypeDef uart_init_struct;
   \                     uart_init_struct:
   \   00000000                      DS8 28
     12          
     13          

   \                                 In section .text, align 2, keep-with-next
     14          void All_Init()
     15          {   
   \                     All_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     16            Right_Encoder_Init();
   \   00000002   0x.... 0x....      BL       Right_Encoder_Init
     17            Motor_Init();
   \   00000006   0x.... 0x....      BL       Motor_Init
     18            Servo_Init();
   \   0000000A   0x.... 0x....      BL       Servo_Init
     19            Pit_Init();
   \   0000000E   0x.... 0x....      BL       Pit_Init
     20            Left_Encoder_Init();
   \   00000012   0x.... 0x....      BL       Left_Encoder_Init
     21            Voltage_Adc_init();
   \   00000016   0x.... 0x....      BL       Voltage_Adc_init
     22            Para_Init();
   \   0000001A   0x.... 0x....      BL       Para_Init
     23            GPIO_Init();
   \   0000001E   0x.... 0x....      BL       GPIO_Init
     24            Fix_Offset();
   \   00000022   0x.... 0x....      BL       Fix_Offset
     25          
     26          }
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void Right_Encoder_Init(void)
     29          {
   \                     Right_Encoder_Init: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     30            //配置正交解码功能参数
     31            ftm_init_struct.FTM_Ftmx = FTM1;              //使用的是FTM1
   \   00000002   0x....             LDR.N    R0,??DataTable8  ;; 0x40039000
   \   00000004   0x....             LDR.N    R1,??DataTable8_1
   \   00000006   0x6008             STR      R0,[R1, #+0]
     32            ftm_init_struct.FTM_Mode = FTM_MODE_QD;       //正交解码功能
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x....             LDR.N    R1,??DataTable8_1
   \   0000000C   0x7108             STRB     R0,[R1, #+4]
     33            ftm_init_struct.FTM_QdMode = QD_MODE_PHAB;    //AB相输入模式
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR.N    R1,??DataTable8_1
   \   00000012   0x7488             STRB     R0,[R1, #+18]
     34            //初始化FTM
     35            LPLD_FTM_Init(ftm_init_struct);
   \   00000014   0x....             LDR.N    R1,??DataTable8_1
   \   00000016   0xB084             SUB      SP,SP,#+16
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x221C             MOVS     R2,#+28
   \   0000001C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000020   0xBC0F             POP      {R0-R3}
   \   00000022   0x.... 0x....      BL       LPLD_FTM_Init
     36            //使能AB相输入通道
     37            //PTB0引脚接A相输入、PTB1引脚接B相输入
     38            LPLD_FTM_QD_Enable(FTM1, PTB0, PTB1);
   \   00000026   0x2221             MOVS     R2,#+33
   \   00000028   0x2120             MOVS     R1,#+32
   \   0000002A   0x....             LDR.N    R0,??DataTable8  ;; 0x40039000
   \   0000002C   0x.... 0x....      BL       LPLD_FTM_QD_Enable
     39          }
   \   00000030   0xBD07             POP      {R0-R2,PC}       ;; return
     40          
     41          

   \                                 In section .text, align 2, keep-with-next
     42          void Motor_Init(void)
     43          {
   \                     Motor_Init: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     44                  //电机模块的初始化
     45              ftm_init_struct.FTM_Ftmx = FTM0;
   \   00000002   0x....             LDR.N    R0,??DataTable8_2  ;; 0x40038000
   \   00000004   0x....             LDR.N    R1,??DataTable8_1
   \   00000006   0x6008             STR      R0,[R1, #+0]
     46              ftm_init_struct.FTM_Mode = FTM_MODE_PWM;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable8_1
   \   0000000C   0x7108             STRB     R0,[R1, #+4]
     47              ftm_init_struct.FTM_PwmFreq = 2500;
   \   0000000E   0xF640 0x10C4      MOVW     R0,#+2500
   \   00000012   0x....             LDR.N    R1,??DataTable8_1
   \   00000014   0x6088             STR      R0,[R1, #+8]
     48              LPLD_FTM_Init(ftm_init_struct);
   \   00000016   0x....             LDR.N    R1,??DataTable8_1
   \   00000018   0xB084             SUB      SP,SP,#+16
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x221C             MOVS     R2,#+28
   \   0000001E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000022   0xBC0F             POP      {R0-R3}
   \   00000024   0x.... 0x....      BL       LPLD_FTM_Init
     49              
     50          
     51              LPLD_FTM_PWM_Enable(FTM0, FTM_Ch4, 50, PTD4, ALIGN_LEFT); //pwm3
   \   00000028   0x2028             MOVS     R0,#+40
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x2360             MOVS     R3,#+96
   \   0000002E   0x2232             MOVS     R2,#+50
   \   00000030   0x2104             MOVS     R1,#+4
   \   00000032   0x....             LDR.N    R0,??DataTable8_2  ;; 0x40038000
   \   00000034   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     52              LPLD_FTM_PWM_Enable(FTM0, FTM_Ch5, 50, PTD5, ALIGN_LEFT); //pwm2
   \   00000038   0x2028             MOVS     R0,#+40
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x2361             MOVS     R3,#+97
   \   0000003E   0x2232             MOVS     R2,#+50
   \   00000040   0x2105             MOVS     R1,#+5
   \   00000042   0x....             LDR.N    R0,??DataTable8_2  ;; 0x40038000
   \   00000044   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     53              LPLD_FTM_PWM_Enable(FTM0, FTM_Ch6, 50, PTD6, ALIGN_LEFT); //pwm1
   \   00000048   0x2028             MOVS     R0,#+40
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0x2362             MOVS     R3,#+98
   \   0000004E   0x2232             MOVS     R2,#+50
   \   00000050   0x2106             MOVS     R1,#+6
   \   00000052   0x....             LDR.N    R0,??DataTable8_2  ;; 0x40038000
   \   00000054   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     54              LPLD_FTM_PWM_Enable(FTM0, FTM_Ch7, 50, PTD7, ALIGN_LEFT); //pwm0
   \   00000058   0x2028             MOVS     R0,#+40
   \   0000005A   0x9000             STR      R0,[SP, #+0]
   \   0000005C   0x2363             MOVS     R3,#+99
   \   0000005E   0x2232             MOVS     R2,#+50
   \   00000060   0x2107             MOVS     R1,#+7
   \   00000062   0x....             LDR.N    R0,??DataTable8_2  ;; 0x40038000
   \   00000064   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     55          
     56          }
   \   00000068   0xBD07             POP      {R0-R2,PC}       ;; return
     57          
     58          

   \                                 In section .text, align 2, keep-with-next
     59          void Servo_Init(void)
     60          {
   \                     Servo_Init: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     61              ftm_init_struct.FTM_Ftmx = FTM2;
   \   00000002   0x....             LDR.N    R0,??DataTable8_3  ;; 0x400b8000
   \   00000004   0x....             LDR.N    R1,??DataTable8_1
   \   00000006   0x6008             STR      R0,[R1, #+0]
     62              ftm_init_struct.FTM_Mode = FTM_MODE_PWM;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable8_1
   \   0000000C   0x7108             STRB     R0,[R1, #+4]
     63              ftm_init_struct.FTM_PwmFreq = 50;   //设置频率为50Hz
   \   0000000E   0x2032             MOVS     R0,#+50
   \   00000010   0x....             LDR.N    R1,??DataTable8_1
   \   00000012   0x6088             STR      R0,[R1, #+8]
     64              LPLD_FTM_Init(ftm_init_struct);
   \   00000014   0x....             LDR.N    R1,??DataTable8_1
   \   00000016   0xB084             SUB      SP,SP,#+16
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x221C             MOVS     R2,#+28
   \   0000001C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000020   0xBC0F             POP      {R0-R3}
   \   00000022   0x.... 0x....      BL       LPLD_FTM_Init
     65               
     66              LPLD_FTM_PWM_Enable(FTM2, FTM_Ch1, 660,PTB19, ALIGN_LEFT);   
   \   00000026   0x2028             MOVS     R0,#+40
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x2333             MOVS     R3,#+51
   \   0000002C   0xF44F 0x7225      MOV      R2,#+660
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x....             LDR.N    R0,??DataTable8_3  ;; 0x400b8000
   \   00000034   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     67          }
   \   00000038   0xBD07             POP      {R0-R2,PC}       ;; return
     68          
     69          
     70          
     71          
     72          
     73          /*
     74           * 初始化PIT定时器
     75           *
     76           */

   \                                 In section .text, align 2, keep-with-next
     77          void Pit_Init(void)
     78          {
   \                     Pit_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     79            //配置定时周期中断参数
     80            pit_init_struct.PIT_Pitx = PIT0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable8_4
   \   00000006   0x7008             STRB     R0,[R1, #+0]
     81            pit_init_struct.PIT_PeriodMs = 1;    //1毫秒产生一次中断
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable8_4
   \   0000000C   0x6088             STR      R0,[R1, #+8]
     82            pit_init_struct.PIT_Isr = pit_isr;
   \   0000000E   0x....             LDR.N    R0,??DataTable8_5
   \   00000010   0x....             LDR.N    R1,??DataTable8_4
   \   00000012   0x6108             STR      R0,[R1, #+16]
     83            //初始化PIT
     84            LPLD_PIT_Init(pit_init_struct);
   \   00000014   0x....             LDR.N    R1,??DataTable8_4
   \   00000016   0xB084             SUB      SP,SP,#+16
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x2214             MOVS     R2,#+20
   \   0000001C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000020   0xBC0F             POP      {R0-R3}
   \   00000022   0x.... 0x....      BL       LPLD_PIT_Init
     85            //使能PIT定时中断
     86            LPLD_PIT_EnableIrq(pit_init_struct);
   \   00000026   0x....             LDR.N    R1,??DataTable8_4
   \   00000028   0xB084             SUB      SP,SP,#+16
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x2214             MOVS     R2,#+20
   \   0000002E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000032   0xBC0F             POP      {R0-R3}
   \   00000034   0x.... 0x....      BL       LPLD_PIT_EnableIrq
     87          }
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
     88          
     89          

   \                                 In section .text, align 2, keep-with-next
     90          void Left_Encoder_Init(void)
     91          {
   \                     Left_Encoder_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     92          
     93              lptmr_init_struct.LPTMR_Mode = LPTMR_MODE_PLACC;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x....             LDR.N    R1,??DataTable8_6
   \   00000006   0x7008             STRB     R0,[R1, #+0]
     94              lptmr_init_struct.LPTMR_PluseAccInput = LPTMR_ALT2;
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x....             LDR.N    R1,??DataTable8_6
   \   0000000C   0x7108             STRB     R0,[R1, #+4]
     95              
     96              lptmr_init_struct.LPTMR_IntEnable = FALSE;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR.N    R1,??DataTable8_6
   \   00000012   0x7148             STRB     R0,[R1, #+5]
     97              LPLD_LPTMR_Init(lptmr_init_struct); 
   \   00000014   0x....             LDR.N    R0,??DataTable8_6
   \   00000016   0xC807             LDM      R0,{R0-R2}
   \   00000018   0x.... 0x....      BL       LPLD_LPTMR_Init
     98          
     99          
    100          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    101          void Voltage_Adc_init(void)
    102          {
   \                     Voltage_Adc_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    103            adc_init_struct.ADC_Adcx = ADC1;
   \   00000002   0x....             LDR.N    R0,??DataTable8_7  ;; 0x400bb000
   \   00000004   0x....             LDR.N    R1,??DataTable8_8
   \   00000006   0x6008             STR      R0,[R1, #+0]
    104            adc_init_struct.ADC_BitMode = SE_10BIT;
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x....             LDR.N    R1,??DataTable8_8
   \   0000000C   0x7148             STRB     R0,[R1, #+5]
    105            adc_init_struct.ADC_CalEnable = TRUE; //使能自动校准
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable8_8
   \   00000012   0x72C8             STRB     R0,[R1, #+11]
    106            LPLD_ADC_Init(adc_init_struct); 
   \   00000014   0x....             LDR.N    R1,??DataTable8_8
   \   00000016   0xB084             SUB      SP,SP,#+16
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x2214             MOVS     R2,#+20
   \   0000001C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000020   0xBC0F             POP      {R0-R3}
   \   00000022   0x.... 0x....      BL       LPLD_ADC_Init
    107            
    108            LPLD_ADC_Chn_Enable(ADC1, AD14);
   \   00000026   0x210E             MOVS     R1,#+14
   \   00000028   0x....             LDR.N    R0,??DataTable8_7  ;; 0x400bb000
   \   0000002A   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
    109          
    110          
    111          
    112          }
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
    113          
    114          /****
    115          * 参数赋值初始化
    116          ****/
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void Para_Init(void)
    119          {
    120            PID_SPEED.P=0.45;
   \                     Para_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8_9  ;; 0x3ee66666
   \   00000002   0x....             LDR.N    R1,??DataTable8_10
   \   00000004   0x6008             STR      R0,[R1, #+0]
    121            PID_SPEED.I=0.0023;
   \   00000006   0x....             LDR.N    R0,??DataTable8_11  ;; 0x3b16bb99
   \   00000008   0x....             LDR.N    R1,??DataTable8_10
   \   0000000A   0x6088             STR      R0,[R1, #+8]
    122            PID_SPEED.D=0.02;
   \   0000000C   0x....             LDR.N    R0,??DataTable8_12  ;; 0x3ca3d70a
   \   0000000E   0x....             LDR.N    R1,??DataTable8_10
   \   00000010   0x6108             STR      R0,[R1, #+16]
    123            PID_TURN.P=0.53;
   \   00000012   0x....             LDR.N    R0,??DataTable8_13  ;; 0x3f07ae14
   \   00000014   0x....             LDR.N    R1,??DataTable8_14
   \   00000016   0x6008             STR      R0,[R1, #+0]
    124            PID_TURN.I=0.1;
   \   00000018   0x....             LDR.N    R0,??DataTable8_15  ;; 0x3dcccccd
   \   0000001A   0x....             LDR.N    R1,??DataTable8_14
   \   0000001C   0x6088             STR      R0,[R1, #+8]
    125            PID_TURN.D=0.7446;
   \   0000001E   0x....             LDR.N    R0,??DataTable8_16  ;; 0x3f3e9e1b
   \   00000020   0x....             LDR.N    R1,??DataTable8_14
   \   00000022   0x6108             STR      R0,[R1, #+16]
    126            SetSpeed=3.5;
   \   00000024   0x....             LDR.N    R0,??DataTable8_17  ;; 0x40600000
   \   00000026   0x....             LDR.N    R1,??DataTable8_18
   \   00000028   0x6008             STR      R0,[R1, #+0]
    127            Threshold=35;
   \   0000002A   0x2023             MOVS     R0,#+35
   \   0000002C   0x....             LDR.N    R1,??DataTable8_19
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
    128            CCD_Offset=200;
   \   00000030   0x20C8             MOVS     R0,#+200
   \   00000032   0x....             LDR.N    R1,??DataTable8_20
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    129            Fuzzy_Kp=0.05;
   \   00000036   0x....             LDR.N    R0,??DataTable8_21  ;; 0x3d4ccccd
   \   00000038   0x....             LDR.N    R1,??DataTable8_22
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    130            Fuzzy_Kd=0.0002;
   \   0000003C   0x....             LDR.N    R0,??DataTable8_23  ;; 0x3951b717
   \   0000003E   0x....             LDR.N    R1,??DataTable8_24
   \   00000040   0x6008             STR      R0,[R1, #+0]
    131            Distance=0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable8_25
   \   00000046   0x6008             STR      R0,[R1, #+0]
    132            K_CrossRoad=1.4;
   \   00000048   0x....             LDR.N    R0,??DataTable8_26  ;; 0x3fb33333
   \   0000004A   0x....             LDR.N    R1,??DataTable8_27
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    133            P_CrossRoad=1.2;
   \   0000004E   0x....             LDR.N    R0,??DataTable8_28  ;; 0x3f99999a
   \   00000050   0x....             LDR.N    R1,??DataTable8_29
   \   00000052   0x6008             STR      R0,[R1, #+0]
    134            Correct_Err=0.026; 
   \   00000054   0x....             LDR.N    R0,??DataTable8_30  ;; 0x3cd4fdf4
   \   00000056   0x....             LDR.N    R1,??DataTable8_31
   \   00000058   0x6008             STR      R0,[R1, #+0]
    135          }
   \   0000005A   0x4770             BX       LR               ;; return
    136          
    137          
    138          /****
    139          * GPIO初始化函数
    140          ****/
    141          

   \                                 In section .text, align 2, keep-with-next
    142          void GPIO_Init(void)
    143          {
   \                     GPIO_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    144              //初始化按键B1-B6
    145              gpio_init_struct.GPIO_PTx = PTA;
   \   00000002   0x....             LDR.N    R0,??DataTable8_32  ;; 0x400ff000
   \   00000004   0x....             LDR.N    R1,??DataTable8_33
   \   00000006   0x6008             STR      R0,[R1, #+0]
    146              gpio_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable8_33
   \   0000000C   0x7308             STRB     R0,[R1, #+12]
    147              gpio_init_struct.GPIO_Pins = GPIO_Pin9|GPIO_Pin10|GPIO_Pin11|GPIO_Pin12|GPIO_Pin13|GPIO_Pin14;
   \   0000000E   0xF44F 0x40FC      MOV      R0,#+32256
   \   00000012   0x....             LDR.N    R1,??DataTable8_33
   \   00000014   0x6048             STR      R0,[R1, #+4]
    148              gpio_init_struct.GPIO_PinControl = INPUT_PULL_UP;
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0x....             LDR.N    R1,??DataTable8_33
   \   0000001A   0x6088             STR      R0,[R1, #+8]
    149              LPLD_GPIO_Init(gpio_init_struct); 
   \   0000001C   0x....             LDR.N    R1,??DataTable8_33
   \   0000001E   0xB084             SUB      SP,SP,#+16
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x2214             MOVS     R2,#+20
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xBC0F             POP      {R0-R3}
   \   0000002A   0x.... 0x....      BL       LPLD_GPIO_Init
    150          
    151              //初始化拨码开关
    152              gpio_init_struct.GPIO_PTx = PTB;
   \   0000002E   0x....             LDR.N    R0,??DataTable8_34  ;; 0x400ff040
   \   00000030   0x....             LDR.N    R1,??DataTable8_33
   \   00000032   0x6008             STR      R0,[R1, #+0]
    153              gpio_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable8_33
   \   00000038   0x7308             STRB     R0,[R1, #+12]
    154              gpio_init_struct.GPIO_Pins = GPIO_Pin2|GPIO_Pin3|GPIO_Pin4|GPIO_Pin5;
   \   0000003A   0x203C             MOVS     R0,#+60
   \   0000003C   0x....             LDR.N    R1,??DataTable8_33
   \   0000003E   0x6048             STR      R0,[R1, #+4]
    155              gpio_init_struct.GPIO_PinControl = INPUT_PULL_UP;
   \   00000040   0x2003             MOVS     R0,#+3
   \   00000042   0x....             LDR.N    R1,??DataTable8_33
   \   00000044   0x6088             STR      R0,[R1, #+8]
    156              LPLD_GPIO_Init(gpio_init_struct); 
   \   00000046   0x....             LDR.N    R1,??DataTable8_33
   \   00000048   0xB084             SUB      SP,SP,#+16
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0x2214             MOVS     R2,#+20
   \   0000004E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000052   0xBC0F             POP      {R0-R3}
   \   00000054   0x.... 0x....      BL       LPLD_GPIO_Init
    157          
    158              
    159              //初始化LED
    160              gpio_init_struct.GPIO_PTx = PTE;
   \   00000058   0x....             LDR.N    R0,??DataTable8_35  ;; 0x400ff100
   \   0000005A   0x....             LDR.N    R1,??DataTable8_33
   \   0000005C   0x6008             STR      R0,[R1, #+0]
    161              gpio_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x....             LDR.N    R1,??DataTable8_33
   \   00000062   0x7308             STRB     R0,[R1, #+12]
    162              gpio_init_struct.GPIO_Output = OUTPUT_H;
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x....             LDR.N    R1,??DataTable8_33
   \   00000068   0x7348             STRB     R0,[R1, #+13]
    163              gpio_init_struct.GPIO_Pins = GPIO_Pin10|GPIO_Pin11|GPIO_Pin12;
   \   0000006A   0xF44F 0x50E0      MOV      R0,#+7168
   \   0000006E   0x....             LDR.N    R1,??DataTable8_33
   \   00000070   0x6048             STR      R0,[R1, #+4]
    164              gpio_init_struct.GPIO_PinControl =  OUTPUT_DSH;
   \   00000072   0x2040             MOVS     R0,#+64
   \   00000074   0x....             LDR.N    R1,??DataTable8_33
   \   00000076   0x6088             STR      R0,[R1, #+8]
    165              LPLD_GPIO_Init(gpio_init_struct);
   \   00000078   0x....             LDR.N    R1,??DataTable8_33
   \   0000007A   0xB084             SUB      SP,SP,#+16
   \   0000007C   0x4668             MOV      R0,SP
   \   0000007E   0x2214             MOVS     R2,#+20
   \   00000080   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000084   0xBC0F             POP      {R0-R3}
   \   00000086   0x.... 0x....      BL       LPLD_GPIO_Init
    166          
    167              
    168              
    169              
    170              //初始化OLED屏幕
    171              gpio_init_struct.GPIO_PTx = PTA;
   \   0000008A   0x....             LDR.N    R0,??DataTable8_32  ;; 0x400ff000
   \   0000008C   0x....             LDR.N    R1,??DataTable8_33
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    172              gpio_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x....             LDR.N    R1,??DataTable8_33
   \   00000094   0x7308             STRB     R0,[R1, #+12]
    173              gpio_init_struct.GPIO_Output = OUTPUT_H;
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0x....             LDR.N    R1,??DataTable8_33
   \   0000009A   0x7348             STRB     R0,[R1, #+13]
    174              gpio_init_struct.GPIO_Pins = GPIO_Pin16 | GPIO_Pin17 | GPIO_Pin24 | GPIO_Pin25;
   \   0000009C   0x....             LDR.N    R0,??DataTable8_36  ;; 0x3030000
   \   0000009E   0x....             LDR.N    R1,??DataTable8_33
   \   000000A0   0x6048             STR      R0,[R1, #+4]
    175          
    176              LPLD_GPIO_Init(gpio_init_struct); 
   \   000000A2   0x....             LDR.N    R1,??DataTable8_33
   \   000000A4   0xB084             SUB      SP,SP,#+16
   \   000000A6   0x4668             MOV      R0,SP
   \   000000A8   0x2214             MOVS     R2,#+20
   \   000000AA   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000AE   0xBC0F             POP      {R0-R3}
   \   000000B0   0x.... 0x....      BL       LPLD_GPIO_Init
    177          
    178          
    179          
    180          
    181          }
   \   000000B4   0xBD01             POP      {R0,PC}          ;; return
    182          //修正传感器偏差

   \                                 In section .text, align 2, keep-with-next
    183          void Fix_Offset()
    184          {
   \                     Fix_Offset: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    185            int Offset_X_Sum=0,Offset_Y_Sum=0;  //偏差累积
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2500             MOVS     R5,#+0
    186            int i; 
    187           // LED_GREEN_ON; 
    188           // LED_RED_ON;
    189            //LED_BLUE_ON;
    190            DELAY_MS(1000); 
   \   00000006   0xF44F 0x707A      MOV      R0,#+1000
   \   0000000A   0x.... 0x....      BL       DELAY_MS
    191            for(i=0;i<20;i++)
   \   0000000E   0x2600             MOVS     R6,#+0
   \   00000010   0xE00E             B.N      ??Fix_Offset_0
    192            {
    193             Offset_X_Sum+= Get_X_Gyro();
   \                     ??Fix_Offset_1: (+1)
   \   00000012   0x.... 0x....      BL       Get_X_Gyro
   \   00000016   0xFA04 0xF480      SXTAH    R4,R4,R0
    194             DELAY_MS(5); 
   \   0000001A   0x2005             MOVS     R0,#+5
   \   0000001C   0x.... 0x....      BL       DELAY_MS
    195             Offset_Y_Sum+= Get_Y_Gyro();
   \   00000020   0x.... 0x....      BL       Get_Y_Gyro
   \   00000024   0xFA05 0xF580      SXTAH    R5,R5,R0
    196             DELAY_MS(5);
   \   00000028   0x2005             MOVS     R0,#+5
   \   0000002A   0x.... 0x....      BL       DELAY_MS
    197            } 
   \   0000002E   0x1C76             ADDS     R6,R6,#+1
   \                     ??Fix_Offset_0: (+1)
   \   00000030   0x2E14             CMP      R6,#+20
   \   00000032   0xDBEE             BLT.N    ??Fix_Offset_1
    198            Gyro_X_Offset=(int)(Offset_X_Sum/20.0);
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       __aeabi_i2d
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0x....             LDR.N    R3,??DataTable8_37  ;; 0x40340000
   \   0000003E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000042   0x.... 0x....      BL       __aeabi_d2iz
   \   00000046   0x....             LDR.N    R1,??DataTable8_38
   \   00000048   0x8008             STRH     R0,[R1, #+0]
    199            Gyro_Y_Offset=(int)(Offset_Y_Sum/20.0);
   \   0000004A   0x0028             MOVS     R0,R5
   \   0000004C   0x.... 0x....      BL       __aeabi_i2d
   \   00000050   0x2200             MOVS     R2,#+0
   \   00000052   0x....             LDR.N    R3,??DataTable8_37  ;; 0x40340000
   \   00000054   0x.... 0x....      BL       __aeabi_ddiv
   \   00000058   0x.... 0x....      BL       __aeabi_d2iz
   \   0000005C   0x....             LDR.N    R1,??DataTable8_39
   \   0000005E   0x8008             STRH     R0,[R1, #+0]
    200          }
   \   00000060   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     ftm_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     pit_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     pit_isr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     lptmr_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x400BB000         DC32     0x400bb000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     adc_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x3EE66666         DC32     0x3ee66666

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     PID_SPEED

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x3B16BB99         DC32     0x3b16bb99

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x3CA3D70A         DC32     0x3ca3d70a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x3F07AE14         DC32     0x3f07ae14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x........         DC32     PID_TURN

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x3DCCCCCD         DC32     0x3dcccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x3F3E9E1B         DC32     0x3f3e9e1b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x40600000         DC32     0x40600000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0x........         DC32     SetSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   0x........         DC32     Threshold

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   0x........         DC32     CCD_Offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   0x3D4CCCCD         DC32     0x3d4ccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_22:
   \   00000000   0x........         DC32     Fuzzy_Kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_23:
   \   00000000   0x3951B717         DC32     0x3951b717

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_24:
   \   00000000   0x........         DC32     Fuzzy_Kd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_25:
   \   00000000   0x........         DC32     Distance

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_26:
   \   00000000   0x3FB33333         DC32     0x3fb33333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_27:
   \   00000000   0x........         DC32     K_CrossRoad

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_28:
   \   00000000   0x3F99999A         DC32     0x3f99999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_29:
   \   00000000   0x........         DC32     P_CrossRoad

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_30:
   \   00000000   0x3CD4FDF4         DC32     0x3cd4fdf4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_31:
   \   00000000   0x........         DC32     Correct_Err

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_32:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_33:
   \   00000000   0x........         DC32     gpio_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_34:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_35:
   \   00000000   0x400FF100         DC32     0x400ff100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_36:
   \   00000000   0x03030000         DC32     0x3030000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_37:
   \   00000000   0x40340000         DC32     0x40340000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_38:
   \   00000000   0x........         DC32     Gyro_X_Offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_39:
   \   00000000   0x........         DC32     Gyro_Y_Offset

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   All_Init
         8   -> Fix_Offset
         8   -> GPIO_Init
         8   -> Left_Encoder_Init
         8   -> Motor_Init
         8   -> Para_Init
         8   -> Pit_Init
         8   -> Right_Encoder_Init
         8   -> Servo_Init
         8   -> Voltage_Adc_init
      16   Fix_Offset
        16   -> DELAY_MS
        16   -> Get_X_Gyro
        16   -> Get_Y_Gyro
        16   -> __aeabi_d2iz
        16   -> __aeabi_ddiv
        16   -> __aeabi_i2d
      24   GPIO_Init
         8   -> LPLD_GPIO_Init
        24   -> __aeabi_memcpy4
       8   Left_Encoder_Init
         8   -> LPLD_LPTMR_Init
      32   Motor_Init
        16   -> LPLD_FTM_Init
        16   -> LPLD_FTM_PWM_Enable
        32   -> __aeabi_memcpy4
       0   Para_Init
      24   Pit_Init
         8   -> LPLD_PIT_EnableIrq
         8   -> LPLD_PIT_Init
        24   -> __aeabi_memcpy4
      32   Right_Encoder_Init
        16   -> LPLD_FTM_Init
        16   -> LPLD_FTM_QD_Enable
        32   -> __aeabi_memcpy4
      32   Servo_Init
        16   -> LPLD_FTM_Init
        16   -> LPLD_FTM_PWM_Enable
        32   -> __aeabi_memcpy4
      24   Voltage_Adc_init
         8   -> LPLD_ADC_Chn_Enable
         8   -> LPLD_ADC_Init
        24   -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_19
       4  ??DataTable8_2
       4  ??DataTable8_20
       4  ??DataTable8_21
       4  ??DataTable8_22
       4  ??DataTable8_23
       4  ??DataTable8_24
       4  ??DataTable8_25
       4  ??DataTable8_26
       4  ??DataTable8_27
       4  ??DataTable8_28
       4  ??DataTable8_29
       4  ??DataTable8_3
       4  ??DataTable8_30
       4  ??DataTable8_31
       4  ??DataTable8_32
       4  ??DataTable8_33
       4  ??DataTable8_34
       4  ??DataTable8_35
       4  ??DataTable8_36
       4  ??DataTable8_37
       4  ??DataTable8_38
       4  ??DataTable8_39
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      40  All_Init
      98  Fix_Offset
     182  GPIO_Init
      30  Left_Encoder_Init
     106  Motor_Init
      92  Para_Init
      58  Pit_Init
      50  Right_Encoder_Init
      58  Servo_Init
      48  Voltage_Adc_init
      20  adc_init_struct
      28  ftm_init_struct
      20  gpio_init_struct
      12  lptmr_init_struct
      20  pit_init_struct
      28  uart_init_struct

 
 128 bytes in section .bss
 922 bytes in section .text
 
 922 bytes of CODE memory
 128 bytes of DATA memory

Errors: none
Warnings: 1

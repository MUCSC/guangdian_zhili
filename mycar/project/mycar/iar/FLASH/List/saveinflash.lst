###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        19/Jul/2016  15:42:36
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\app\saveinflash.c
#    Command line =  
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\app\saveinflash.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\FLASH\List\
#        -lB
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\FLASH\List\
#        -o
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        E:\IAR\anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\app\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\CPU\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\common\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\LPLD\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\LPLD\HW\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\FatFs\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\FatFs\option\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\USB\common\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\USB\driver\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\USB\descriptor\
#        -I
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\..\..\..\lib\USB\class\
#        -Ol -I E:\IAR\anzhuang\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\FLASH\List\saveinflash.lst
#    Object file  =  
#        F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\iar\FLASH\Obj\saveinflash.o
#
###############################################################################

F:\work\competition\freescale\P_freestyle\MINE\16.5.16\mycar\project\mycar\app\saveinflash.c
      1          #include "saveinflash.h"
      2          #define FLASH_SAVE_SECTOR   (127)  //储存扇区
      3          #define FLASH_SAVE_ADDR     (FLASH_SAVE_SECTOR*2048)  
      4          #define DATA_SIZE      (157)

   \                                 In section .bss, align 4
      5          uint8 read_buffer[DATA_SIZE];  //定义读缓冲区
   \                     read_buffer:
   \   00000000                      DS8 160

   \                                 In section .bss, align 4
      6          uint8 write_buffer[DATA_SIZE]={0}; //定义写缓冲区
   \                     write_buffer:
   \   00000000                      DS8 160

   \                                 In section .data, align 4
      7          uint8 *ptr=(uint8*)FLASH_SAVE_ADDR;
   \                     ptr:
   \   00000000   0x0003F800         DC32 3F800H

   \                                 In section .bss, align 1
      8          uint8 DataInFlash_Num=0;
   \                     DataInFlash_Num:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
      9          float *Save_Data[13]={&PID_Speed.P,&PID_Speed.I,&PID_Speed.D,&PID_Turn.P,&PID_Turn.D,&PID_Turn.I,&Threshold,&K_Barraicade,&Correct_Err,&K_CrossRoad,&SetSpeed,&P_CrossRoad,&Barraicade_Num};
   \                     Save_Data:
   \   00000000   0x........         DC32 PID_Speed, PID_Speed + 8H, PID_Speed + 10H, PID_Turn
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 PID_Turn + 10H, PID_Turn + 8H, Threshold, K_Barraicade
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000020   0x........         DC32 Correct_Err, K_CrossRoad, SetSpeed, P_CrossRoad, Barraicade_Num
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   

   \                                 In section .text, align 2, keep-with-next
     10          void DebugData_Init()
     11          {
   \                     DebugData_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     12            if(SW_In2==0)
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff040
   \   00000006   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD103             BNE.N    ??DebugData_Init_0
     13            {
     14              DataInFlash_Num=0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR.N    R1,??DataTable2_1
   \   00000012   0x7008             STRB     R0,[R1, #+0]
   \   00000014   0xE016             B.N      ??DebugData_Init_1
     15            
     16            }
     17            else if(SW_In3==0)
   \                     ??DebugData_Init_0: (+1)
   \   00000016   0x2103             MOVS     R1,#+3
   \   00000018   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff040
   \   0000001A   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD103             BNE.N    ??DebugData_Init_2
     18            {
     19               DataInFlash_Num=1;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x....             LDR.N    R1,??DataTable2_1
   \   00000026   0x7008             STRB     R0,[R1, #+0]
   \   00000028   0xE00C             B.N      ??DebugData_Init_1
     20            
     21            }
     22            else if(SW_In4==0)
   \                     ??DebugData_Init_2: (+1)
   \   0000002A   0x2102             MOVS     R1,#+2
   \   0000002C   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff040
   \   0000002E   0x.... 0x....      BL       LPLD_GPIO_Input_b
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD103             BNE.N    ??DebugData_Init_3
     23            {
     24            
     25              DataInFlash_Num=2;
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x....             LDR.N    R1,??DataTable2_1
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
   \   0000003C   0xE002             B.N      ??DebugData_Init_1
     26            }
     27            else
     28            {
     29              DataInFlash_Num=0;
   \                     ??DebugData_Init_3: (+1)
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable2_1
   \   00000042   0x7008             STRB     R0,[R1, #+0]
     30            }
     31            LPLD_Flash_Init();
   \                     ??DebugData_Init_1: (+1)
   \   00000044   0x.... 0x....      BL       LPLD_Flash_Init
     32            delay_flash();
   \   00000048   0x.... 0x....      BL       delay_flash
     33          
     34            if(*(ptr)!=0xa3)  //没有数据保存
   \   0000004C   0x....             LDR.N    R0,??DataTable2_2
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x7800             LDRB     R0,[R0, #+0]
   \   00000052   0x28A3             CMP      R0,#+163
   \   00000054   0xD002             BEQ.N    ??DebugData_Init_4
     35            {
     36              
     37              DebugData_Save();
   \   00000056   0x.... 0x....      BL       DebugData_Save
   \   0000005A   0xE001             B.N      ??DebugData_Init_5
     38              
     39            
     40            }
     41            else
     42            {
     43              DebugData_Read();
   \                     ??DebugData_Init_4: (+1)
   \   0000005C   0x.... 0x....      BL       DebugData_Read
     44            }
     45          
     46          
     47          
     48          
     49          }
   \                     ??DebugData_Init_5: (+1)
   \   00000060   0xBD01             POP      {R0,PC}          ;; return
     50          
     51          
     52          

   \                                 In section .text, align 2, keep-with-next
     53          void DebugData_Save()
     54          {
   \                     DebugData_Save: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     55            uint8 i;
     56            write_buffer[0]=0xa3;
   \   00000002   0x20A3             MOVS     R0,#+163
   \   00000004   0x....             LDR.N    R1,??DataTable2_3
   \   00000006   0x7008             STRB     R0,[R1, #+0]
     57            for(i=1;i<157;i++)
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE007             B.N      ??DebugData_Save_0
     58            {
     59              write_buffer[i]=*(ptr+i);
   \                     ??DebugData_Save_1: (+1)
   \   0000000C   0x....             LDR.N    R1,??DataTable2_2
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x5C41             LDRB     R1,[R0, R1]
   \   00000014   0x....             LDR.N    R2,??DataTable2_3
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x5481             STRB     R1,[R0, R2]
     60            
     61            }
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \                     ??DebugData_Save_0: (+1)
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x289D             CMP      R0,#+157
   \   00000020   0xDBF4             BLT.N    ??DebugData_Save_1
     62            for(i=0;i<13;i++)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xE03C             B.N      ??DebugData_Save_2
     63            {
     64              write_buffer[4*i+1+DataInFlash_Num*52]=BYTE0(*Save_Data[i]);
   \                     ??DebugData_Save_3: (+1)
   \   00000026   0x....             LDR.N    R1,??DataTable2_3
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x0082             LSLS     R2,R0,#+2
   \   0000002C   0x....             LDR.N    R3,??DataTable2_1
   \   0000002E   0x781B             LDRB     R3,[R3, #+0]
   \   00000030   0x2434             MOVS     R4,#+52
   \   00000032   0xFB04 0x2203      MLA      R2,R4,R3,R2
   \   00000036   0x1851             ADDS     R1,R2,R1
   \   00000038   0x....             LDR.N    R2,??DataTable2_4
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000040   0x7812             LDRB     R2,[R2, #+0]
   \   00000042   0x704A             STRB     R2,[R1, #+1]
     65              write_buffer[4*i+2+DataInFlash_Num*52]=BYTE1(*Save_Data[i]);
   \   00000044   0x....             LDR.N    R1,??DataTable2_3
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x0082             LSLS     R2,R0,#+2
   \   0000004A   0x....             LDR.N    R3,??DataTable2_1
   \   0000004C   0x781B             LDRB     R3,[R3, #+0]
   \   0000004E   0x2434             MOVS     R4,#+52
   \   00000050   0xFB04 0x2203      MLA      R2,R4,R3,R2
   \   00000054   0x1851             ADDS     R1,R2,R1
   \   00000056   0x....             LDR.N    R2,??DataTable2_4
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000005E   0x7852             LDRB     R2,[R2, #+1]
   \   00000060   0x708A             STRB     R2,[R1, #+2]
     66              write_buffer[4*i+3+DataInFlash_Num*52]=BYTE2(*Save_Data[i]);
   \   00000062   0x....             LDR.N    R1,??DataTable2_3
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x0082             LSLS     R2,R0,#+2
   \   00000068   0x....             LDR.N    R3,??DataTable2_1
   \   0000006A   0x781B             LDRB     R3,[R3, #+0]
   \   0000006C   0x2434             MOVS     R4,#+52
   \   0000006E   0xFB04 0x2203      MLA      R2,R4,R3,R2
   \   00000072   0x1851             ADDS     R1,R2,R1
   \   00000074   0x....             LDR.N    R2,??DataTable2_4
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000007C   0x7892             LDRB     R2,[R2, #+2]
   \   0000007E   0x70CA             STRB     R2,[R1, #+3]
     67              write_buffer[4*i+4+DataInFlash_Num*52]=BYTE3(*Save_Data[i]);
   \   00000080   0x....             LDR.N    R1,??DataTable2_3
   \   00000082   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000084   0x0082             LSLS     R2,R0,#+2
   \   00000086   0x....             LDR.N    R3,??DataTable2_1
   \   00000088   0x781B             LDRB     R3,[R3, #+0]
   \   0000008A   0x2434             MOVS     R4,#+52
   \   0000008C   0xFB04 0x2203      MLA      R2,R4,R3,R2
   \   00000090   0x1851             ADDS     R1,R2,R1
   \   00000092   0x....             LDR.N    R2,??DataTable2_4
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000009A   0x78D2             LDRB     R2,[R2, #+3]
   \   0000009C   0x710A             STRB     R2,[R1, #+4]
     68              
     69          
     70            }
   \   0000009E   0x1C40             ADDS     R0,R0,#+1
   \                     ??DebugData_Save_2: (+1)
   \   000000A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A2   0x280D             CMP      R0,#+13
   \   000000A4   0xDBBF             BLT.N    ??DebugData_Save_3
     71          
     72            DisableInterrupts;  
   \   000000A6   0xB672             CPSID    I
     73            LPLD_Flash_SectorErase(FLASH_SAVE_ADDR);
   \   000000A8   0xF45F 0x307E      MOVS     R0,#+260096
   \   000000AC   0x.... 0x....      BL       LPLD_Flash_SectorErase
     74            EnableInterrupts; 
   \   000000B0   0xB662             CPSIE    I
     75            DisableInterrupts;  
   \   000000B2   0xB672             CPSID    I
     76            LPLD_Flash_ByteProgram((uint32)FLASH_SAVE_ADDR, (uint32*)write_buffer, DATA_SIZE);
   \   000000B4   0x229D             MOVS     R2,#+157
   \   000000B6   0x....             LDR.N    R1,??DataTable2_3
   \   000000B8   0xF45F 0x307E      MOVS     R0,#+260096
   \   000000BC   0x.... 0x....      BL       LPLD_Flash_ByteProgram
     77            EnableInterrupts;
   \   000000C0   0xB662             CPSIE    I
     78            delay_flash();
   \   000000C2   0x.... 0x....      BL       delay_flash
     79            
     80          
     81          }
   \   000000C6   0xBD10             POP      {R4,PC}          ;; return
     82          
     83          
     84          
     85          

   \                                 In section .text, align 2, keep-with-next
     86          void DebugData_Read()
     87          {
     88            uint8 i;
     89          
     90          
     91            for(i=0;i<13;i++)
   \                     DebugData_Read: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE040             B.N      ??DebugData_Read_0
     92            {
     93              BYTE0(*Save_Data[i])=*(ptr + 4*i+1+52*DataInFlash_Num);
   \                     ??DebugData_Read_1: (+1)
   \   00000004   0x....             LDR.N    R1,??DataTable2_2
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000000E   0x....             LDR.N    R2,??DataTable2_1
   \   00000010   0x7812             LDRB     R2,[R2, #+0]
   \   00000012   0x2334             MOVS     R3,#+52
   \   00000014   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000018   0x7849             LDRB     R1,[R1, #+1]
   \   0000001A   0x....             LDR.N    R2,??DataTable2_4
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000022   0x7011             STRB     R1,[R2, #+0]
     94              BYTE1(*Save_Data[i])=*(ptr + 4*i+2+52*DataInFlash_Num);
   \   00000024   0x....             LDR.N    R1,??DataTable2_2
   \   00000026   0x6809             LDR      R1,[R1, #+0]
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000002E   0x....             LDR.N    R2,??DataTable2_1
   \   00000030   0x7812             LDRB     R2,[R2, #+0]
   \   00000032   0x2334             MOVS     R3,#+52
   \   00000034   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000038   0x7889             LDRB     R1,[R1, #+2]
   \   0000003A   0x....             LDR.N    R2,??DataTable2_4
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000042   0x7051             STRB     R1,[R2, #+1]
     95              BYTE2(*Save_Data[i])=*(ptr + 4*i+3+52*DataInFlash_Num);
   \   00000044   0x....             LDR.N    R1,??DataTable2_2
   \   00000046   0x6809             LDR      R1,[R1, #+0]
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000004E   0x....             LDR.N    R2,??DataTable2_1
   \   00000050   0x7812             LDRB     R2,[R2, #+0]
   \   00000052   0x2334             MOVS     R3,#+52
   \   00000054   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000058   0x78C9             LDRB     R1,[R1, #+3]
   \   0000005A   0x....             LDR.N    R2,??DataTable2_4
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000062   0x7091             STRB     R1,[R2, #+2]
     96              BYTE3(*Save_Data[i])=*(ptr + 4*i+4+52*DataInFlash_Num);
   \   00000064   0x....             LDR.N    R1,??DataTable2_2
   \   00000066   0x6809             LDR      R1,[R1, #+0]
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000006E   0x....             LDR.N    R2,??DataTable2_1
   \   00000070   0x7812             LDRB     R2,[R2, #+0]
   \   00000072   0x2334             MOVS     R3,#+52
   \   00000074   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000078   0x7909             LDRB     R1,[R1, #+4]
   \   0000007A   0x....             LDR.N    R2,??DataTable2_4
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000082   0x70D1             STRB     R1,[R2, #+3]
     97            }
   \   00000084   0x1C40             ADDS     R0,R0,#+1
   \                     ??DebugData_Read_0: (+1)
   \   00000086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   0x280D             CMP      R0,#+13
   \   0000008A   0xDBBB             BLT.N    ??DebugData_Read_1
     98          
     99          
    100          }
   \   0000008C   0x4770             BX       LR               ;; return
    101          
    102          

   \                                 In section .text, align 4, keep-with-next
    103          void delay_flash()
    104          {
    105            uint16 i, n;
    106            for(i=0;i<30000;i++)
   \                     delay_flash: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE005             B.N      ??delay_flash_0
    107            {
    108              for(n=0;n<200;n++)
    109              {
    110                asm("nop");
   \                     ??delay_flash_1: (+1)
   \   00000004   0xBF00             nop
    111              }
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??delay_flash_2: (+1)
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x29C8             CMP      R1,#+200
   \   0000000C   0xDBFA             BLT.N    ??delay_flash_1
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??delay_flash_0: (+1)
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0xF247 0x5130      MOVW     R1,#+30000
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xDA01             BGE.N    ??delay_flash_3
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xE7F4             B.N      ??delay_flash_2
    112            }
    113          }
   \                     ??delay_flash_3: (+1)
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     DataInFlash_Num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ptr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     write_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     Save_Data

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DebugData_Init
         8   -> DebugData_Read
         8   -> DebugData_Save
         8   -> LPLD_Flash_Init
         8   -> LPLD_GPIO_Input_b
         8   -> delay_flash
       0   DebugData_Read
       8   DebugData_Save
         8   -> LPLD_Flash_ByteProgram
         8   -> LPLD_Flash_SectorErase
         8   -> delay_flash
       0   delay_flash


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       1  DataInFlash_Num
      98  DebugData_Init
     142  DebugData_Read
     200  DebugData_Save
      52  Save_Data
      32  delay_flash
       4  ptr
     160  read_buffer
     160  write_buffer

 
 321 bytes in section .bss
  56 bytes in section .data
 492 bytes in section .text
 
 492 bytes of CODE memory
 377 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        13/Apr/2017  22:11:34
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\app\I2C.c
#    Command line =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\app\I2C.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\List\
#        -lB
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\List\
#        -o
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\app\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\..\..\..\lib\USB\class\
#        -Ol -I "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\List\I2C.lst
#    Object file  =  
#        C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\iar\FLASH\Obj\I2C.o
#
###############################################################################

C:\Users\Chron\Desktop\智能车\私家车_葛峰\代码\mycar\project\mycar\app\I2C.c
      1          #include "include.h"
      2          
      3          int read_buff[6];
      4          
      5          void I2C_Start(void);
      6          void I2C_Stop(void);
      7          void I2C_Ack(void);
      8          void I2C_NoAck(void);
      9          void I2C_SendByte(uint8);
     10          uint8 I2C_ReceiveByte(void);
     11          void I2C_Delay(uint16);
     12          
     13          /*
     14           * I2C_Init
     15           * 初始化I2C所需引脚
     16           */
     17          void I2C_Init(void)
     18          { 
     19           gpio_init(PTB22,GPO,1);                     //初始化SCL管脚
     20           gpio_init(PTB23,GPO,1);                     //初始化SDA管脚
     21           MPU3050_Init();
     22           MMA8451_Init();
     23          }
     24          /*
     25           * I2C_WriteReg
     26           * 写I2C设备寄存器
     27           */
     28          void I2C_WriteReg(uint8 dev_addr,uint8 reg_addr , uint8 data)
     29          {		
     30            I2C_Start();
     31            I2C_SendByte(dev_addr<<1);         
     32            I2C_SendByte(reg_addr );   
     33            I2C_SendByte(data);   
     34            I2C_Stop(); 
     35          }
     36          //读寄存器
     37          uint8 I2C_ReadByte(uint8 dev_addr,uint8 reg_addr)
     38          {
     39            uint8 data;
     40            I2C_Start();
     41            I2C_SendByte( dev_addr<<1); 
     42            I2C_SendByte( reg_addr ); 
     43            I2C_Start();	
     44            I2C_SendByte((dev_addr<<1)+1); 
     45            data= I2C_ReceiveByte();
     46            I2C_NoAck();
     47            I2C_Stop();
     48            return data;
     49          }
     50          
     51          //读寄存器
     52          int16 I2C_ReadWord(uint8 dev_addr,uint8 reg_addr)
     53          {
     54            char h,l;
     55            I2C_Start();
     56            I2C_SendByte( dev_addr<<1); 
     57            I2C_SendByte( reg_addr); 
     58            I2C_Start();	
     59            I2C_SendByte((dev_addr<<1)+1); 
     60            h= I2C_ReceiveByte();
     61            I2C_Ack();
     62            l= I2C_ReceiveByte();
     63            I2C_NoAck();
     64            I2C_Stop();
     65            return (h<<8)+l;
     66          }
     67          
     68          void I2C_ReadGryo(uint8 dev_addr,uint8 reg_addr,int16 *x,int16 *y)
     69          {
     70            char h,l;
     71            I2C_Start();
     72            I2C_SendByte( dev_addr<<1); 
     73            I2C_SendByte( reg_addr); 
     74            I2C_Start();	
     75            I2C_SendByte((dev_addr<<1)+1); 
     76            h= I2C_ReceiveByte();
     77            I2C_Ack();
     78            l= I2C_ReceiveByte();
     79            I2C_Ack();
     80            *x=(h<<8)+l;
     81            h= I2C_ReceiveByte();
     82            I2C_Ack();
     83            l= I2C_ReceiveByte();
     84            I2C_Ack();
     85            h= I2C_ReceiveByte();
     86            I2C_Ack();
     87            l= I2C_ReceiveByte();
     88            I2C_NoAck();
     89            *y=(h<<8)+l;
     90            I2C_Stop();
     91          }
     92          /*
     93           * I2C_Start
     94           * I2C起始信号，内部调用
     95           */
     96          void I2C_Start(void)
     97          {
     98            I2C_SDA_OUT();
     99            I2C_DELAY();
    100            I2C_DELAY();
    101            I2C_SDA_O=1; 
    102            I2C_SCL=1;
    103            I2C_DELAY();
    104            I2C_DELAY();
    105            I2C_SDA_O=0; 
    106            I2C_DELAY();
    107            I2C_DELAY();
    108            I2C_SCL=0;
    109            I2C_DELAY();
    110            I2C_DELAY();
    111          }
    112          
    113          /*
    114           * I2C_Stop
    115           * I2C停止信号，内部调用
    116           */
    117           void I2C_Stop(void)
    118          { 
    119              I2C_SDA_O=0;
    120              I2C_SCL=0; 
    121            I2C_DELAY();
    122            I2C_DELAY();
    123              I2C_SCL=1;
    124            I2C_DELAY();
    125            I2C_DELAY();
    126              I2C_SDA_O=1;
    127            I2C_DELAY();
    128            I2C_DELAY();
    129              I2C_SCL=0;
    130          }
    131          
    132          /*
    133           * I2C_Stop
    134           * I2C应答信号，内部调用
    135           */
    136          void I2C_Ack(void)
    137          {	
    138            I2C_SCL=0;
    139            I2C_DELAY();
    140            
    141            I2C_SDA_O=0;
    142            I2C_DELAY();
    143            
    144            I2C_SCL=1;
    145            I2C_DELAY();
    146            
    147            I2C_SCL=0;
    148            I2C_DELAY();
    149          }
    150          
    151          /*
    152           * I2C_NoAck
    153           * I2C无应答信号，内部调用
    154           */
    155           void I2C_NoAck(void)
    156          {	
    157            I2C_SCL=0;
    158            I2C_DELAY();
    159            I2C_SDA_O=1;
    160            I2C_DELAY();
    161            I2C_SCL=1;
    162            I2C_DELAY();
    163            I2C_SCL=0;
    164            I2C_DELAY();
    165          }
    166          
    167          
    168          /*
    169           * I2C_SendByte
    170           * I2C发送数据，内部调用
    171           */
    172          void I2C_SendByte(uint8 data) 
    173          {
    174            uint8 i=8;
    175            while(i--)
    176            {
    177              I2C_SCL=0;
    178              if(data&0x80)
    179                I2C_SDA_O=1; 
    180              else 
    181                I2C_SDA_O=0;   
    182              data<<=1;
    183              I2C_DELAY();
    184              I2C_SCL=1;
    185              I2C_DELAY();
    186            }
    187            I2C_SCL=0;
    188            I2C_DELAY();
    189            I2C_SDA_I=1;
    190            I2C_DELAY();
    191            I2C_SCL=1; 
    192            I2C_DELAY();
    193            I2C_SCL=0;
    194          }
    195          
    196          /*
    197           * I2C_SendByte
    198           * I2C接收数据，内部调用
    199           */
    200           uint8 I2C_ReceiveByte(void)  
    201          { 
    202            uint8 i=8;
    203            uint8 ReceiveByte=0;
    204            
    205            I2C_SDA_O=1;	
    206            I2C_SDA_IN();	
    207            
    208            while(i--)
    209            {
    210              ReceiveByte<<=1;      
    211              I2C_SCL=0;
    212              I2C_DELAY();
    213              I2C_SCL=1;
    214              I2C_DELAY();	
    215              if(I2C_SDA_I)
    216              {
    217                ReceiveByte|=0x01;
    218              }
    219              
    220            }
    221            I2C_SDA_OUT();
    222            I2C_SCL=0;
    223            
    224            return ReceiveByte;
    225          }
    226          
    227          /*
    228           * I2C_SendByte
    229           * I2C延时函数，内部调用
    230           */
    231          void I2C_Delay(uint16 i)
    232          {	
    233            while(i) 
    234              i--; 
    235          }
    236          
    237          /******************获得Z轴加速度******************/
    238          int16 Get_Z_Acc()
    239          {
    240            int16 temp;
    241            temp=I2C_ReadWord(I2C_MMA8451_ADR,0X05);
    242            return temp;
    243          }
    244          /*****************获得y轴角速度*****************/
    245          int16 Get_Y_Gyro()
    246          {
    247            int16 temp; 
    248            temp=I2C_ReadWord(I2C_MPU3050_ADR,0X1f);
    249            return temp;
    250          }
    251          /*****************获得x轴角速度*****************/
    252          int16 Get_X_Gyro()
    253          {
    254            int16 temp;
    255            temp=I2C_ReadWord(I2C_MPU3050_ADR,0X1D);
    256            return temp;
    257          }
    258          
    259          void MPU3050_Init()
    260          {
    261           I2C_WriteReg(I2C_MPU3050_ADR,0x3E , 0X80); //复位MPU3050
    262           DELAY_MS(5);
    263           I2C_WriteReg(I2C_MPU3050_ADR,0x15,  0);    //采样不分频
    264           DELAY_MS(5);
    265           I2C_WriteReg(I2C_MPU3050_ADR,0x16 , 0x11);  //采样速率8kHz&&采样范围±1000°
    266           DELAY_MS(5);
    267           I2C_WriteReg(I2C_MPU3050_ADR,0x17 , 0);    //不产生中断
    268           DELAY_MS(5);
    269           I2C_WriteReg(I2C_MPU3050_ADR,0x3E , 0X00); //启动MPU3050
    270          }
    271          
    272          void MMA8451_Init()
    273          { 
    274           I2C_WriteReg(I2C_MMA8451_ADR,0x0E, 1);  //0为+-2g，1为+-4g，2为+-8g
    275           DELAY_MS(5);
    276           I2C_WriteReg(I2C_MMA8451_ADR,0x0F, 0X10);  // 使能低通滤波
    277           DELAY_MS(5);
    278           I2C_WriteReg(I2C_MMA8451_ADR,0x2A , 1); //0x2a为控制寄存器1 激活mma8451
    279           DELAY_MS(5);
    280          }
    281          	

Errors: 20
Warnings: 3
